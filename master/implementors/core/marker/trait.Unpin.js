(function() {var implementors = {};
implementors["numpy"] = [{"text":"impl&lt;T, D&gt; Unpin for PyArray&lt;T, D&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;D: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for PyArrayDescr","synthetic":true,"types":[]},{"text":"impl Unpin for DataType","synthetic":true,"types":[]},{"text":"impl Unpin for ShapeError","synthetic":true,"types":[]},{"text":"impl Unpin for FromVecError","synthetic":true,"types":[]},{"text":"impl Unpin for NotContiguousError","synthetic":true,"types":[]},{"text":"impl Unpin for PyArrayAPI","synthetic":true,"types":[]},{"text":"impl Unpin for NpyTypes","synthetic":true,"types":[]},{"text":"impl Unpin for PyArrayObject","synthetic":true,"types":[]},{"text":"impl Unpin for PyArray_Descr","synthetic":true,"types":[]},{"text":"impl Unpin for PyArrray_ArrayDescr","synthetic":true,"types":[]},{"text":"impl Unpin for PyArray_ArrFuncs","synthetic":true,"types":[]},{"text":"impl Unpin for PyArrayFlagsObject","synthetic":true,"types":[]},{"text":"impl Unpin for PyArray_Dims","synthetic":true,"types":[]},{"text":"impl Unpin for PyArray_Chunk","synthetic":true,"types":[]},{"text":"impl Unpin for PyArrayInterface","synthetic":true,"types":[]},{"text":"impl Unpin for PyUFuncObject","synthetic":true,"types":[]},{"text":"impl Unpin for NpyIter","synthetic":true,"types":[]},{"text":"impl Unpin for PyArrayIterObject","synthetic":true,"types":[]},{"text":"impl Unpin for PyArrayMultiIterObject","synthetic":true,"types":[]},{"text":"impl Unpin for PyArrayNeighborhoodIterObject","synthetic":true,"types":[]},{"text":"impl Unpin for PyArrayMapIterObject","synthetic":true,"types":[]},{"text":"impl Unpin for NpyAuxData","synthetic":true,"types":[]},{"text":"impl Unpin for npy_cdouble","synthetic":true,"types":[]},{"text":"impl Unpin for npy_cfloat","synthetic":true,"types":[]},{"text":"impl Unpin for npy_clongdouble","synthetic":true,"types":[]},{"text":"impl Unpin for NPY_ORDER","synthetic":true,"types":[]},{"text":"impl Unpin for NPY_SCALARKIND","synthetic":true,"types":[]},{"text":"impl Unpin for NPY_SORTKIND","synthetic":true,"types":[]},{"text":"impl Unpin for NPY_SEARCHSIDE","synthetic":true,"types":[]},{"text":"impl Unpin for NPY_DATETIMEUNIT","synthetic":true,"types":[]},{"text":"impl Unpin for NPY_TYPES","synthetic":true,"types":[]},{"text":"impl Unpin for NPY_SELECTKIND","synthetic":true,"types":[]},{"text":"impl Unpin for NPY_CASTING","synthetic":true,"types":[]},{"text":"impl Unpin for NPY_CLIPMODE","synthetic":true,"types":[]},{"text":"impl Unpin for npy_datetimestruct","synthetic":true,"types":[]},{"text":"impl Unpin for npy_timedeltastruct","synthetic":true,"types":[]},{"text":"impl Unpin for npy_stride_sort_item","synthetic":true,"types":[]},{"text":"impl Unpin for PyUFuncAPI","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for RO&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;S&gt; Unpin for RW&lt;S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl Unpin for NpyIterFlag","synthetic":true,"types":[]},{"text":"impl&lt;'py, T, I&gt; Unpin for NpySingleIterBuilder&lt;'py, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'py, T, I&gt; Unpin for NpySingleIter&lt;'py, T, I&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;I: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'py, T, S&gt; Unpin for NpyMultiIterBuilder&lt;'py, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'py, T, S&gt; Unpin for NpyMultiIter&lt;'py, T, S&gt; <span class=\"where fmt-newline\">where<br>&nbsp;&nbsp;&nbsp;&nbsp;S: Unpin,<br>&nbsp;&nbsp;&nbsp;&nbsp;T: Unpin,&nbsp;</span>","synthetic":true,"types":[]},{"text":"impl&lt;'py, T, D&gt; Unpin for PyReadonlyArray&lt;'py, T, D&gt;","synthetic":true,"types":[]}];
if (window.register_implementors) {window.register_implementors(implementors);} else {window.pending_implementors = implementors;}})()