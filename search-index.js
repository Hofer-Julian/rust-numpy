var searchIndex = JSON.parse('{\
"numpy":{"doc":"This crate provides Rust interfaces for NumPy C APIs, …","t":[13,4,6,6,8,3,18,2,5,6,5,6,5,6,5,6,5,6,5,6,5,6,3,13,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,0,14,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,0,11,5,5,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,10,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,2,11,11,0,11,11,11,11,11,11,14,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,6,6,6,6,6,3,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,8,16,16,8,8,8,10,10,18,3,3,18,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,7,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,6,6,3,6,6,3,3,3,3,3,3,3,6,6,6,3,3,3,6,6,6,3,3,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,4,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,13,13,13,13,13,13,13,13,18,4,13,13,13,13,4,13,13,4,4,13,13,13,4,13,13,13,13,13,13,4,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,6,6,3,3,6,3,6,6,6,6,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,6,3,6,6,6,6,6,6,6,6,6,6,6,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,7,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AlreadyBorrowed","BorrowError","Complex32","Complex64","Element","FromVecError","IS_COPY","IntoPyArray","Ix1","Ix1","Ix2","Ix2","Ix3","Ix3","Ix4","Ix4","Ix5","Ix5","Ix6","Ix6","IxDyn","IxDyn","NotContiguousError","NotWriteable","NpyIndex","PY_ARRAY_API","PY_UFUNC_API","PyArray","PyArray0","PyArray1","PyArray2","PyArray3","PyArray4","PyArray5","PyArray6","PyArrayDescr","PyArrayDyn","PyReadonlyArray","PyReadonlyArray1","PyReadonlyArray2","PyReadonlyArray3","PyReadonlyArray4","PyReadonlyArray5","PyReadonlyArray6","PyReadonlyArrayDyn","PyReadwriteArray","PyReadwriteArray1","PyReadwriteArray2","PyReadwriteArray3","PyReadwriteArray4","PyReadwriteArray5","PyReadwriteArray6","PyReadwriteArrayDyn","ToNpyDims","ToPyArray","alignment","arguments","arguments","arguments","array","array","as_dtype_ptr","as_ptr","as_ref","base","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byteorder","char","convert","datetime","deref","dot","dtype","einsum","einsum","extract","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_borrowed_ptr_or_opt","from_owned_ptr_or_opt","from_subset","from_subset","from_subset","from_subset","get_array_module","get_dtype","get_dtype","get_dtype","get_field","has_fields","has_object","has_subarray","inner","into","into","into","into","into_dtype_ptr","into_py","is_aligned_struct","is_equiv_to","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_native_byteorder","is_type_of","itemsize","kind","nalgebra","names","ndarray","ndim","new","npyffi","num","object","of","provide","provide","provide","pyarray","pyo3","shape","to_object","to_string","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from_exact","try_from_unchecked","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_object_raw","typeobj","PyArray","PyArray0","PyArray1","PyArray2","PyArray3","PyArray4","PyArray5","PyArray6","PyArrayDyn","arange","as_array","as_array_mut","as_array_ptr","as_ptr","as_raw_array","as_raw_array_mut","as_ref","as_slice","as_slice_mut","borrow","borrow_from_array","borrow_mut","cast","copy_to","data","deref","dims","dtype","extract","fmt","fmt","from","from_array","from_borrowed_ptr","from_borrowed_ptr_or_opt","from_exact_iter","from_iter","from_owned_array","from_owned_object_array","from_owned_ptr","from_owned_ptr_or_opt","from_slice","from_subset","from_vec","from_vec2","from_vec3","get","get_array_module","get_mut","get_owned","into","into_py","into_py","is_c_contiguous","is_contiguous","is_empty","is_fortran_contiguous","is_in_subset","is_type_of","item","len","ndim","new","readonly","readwrite","reshape","reshape_with_order","resize","shape","strides","to_dyn","to_object","to_owned","to_owned_array","to_string","to_subset","to_subset_unchecked","to_vec","try_as_matrix","try_as_matrix_mut","try_from","try_from","try_from_exact","try_from_unchecked","try_into","try_readonly","try_readwrite","type_id","type_object_raw","uget","uget_mut","uget_raw","zeros","PyReadonlyArray","PyReadonlyArray1","PyReadonlyArray2","PyReadonlyArray3","PyReadonlyArray4","PyReadonlyArray5","PyReadonlyArray6","PyReadonlyArrayDyn","PyReadwriteArray","PyReadwriteArray1","PyReadwriteArray2","PyReadwriteArray3","PyReadwriteArray4","PyReadwriteArray5","PyReadwriteArray6","PyReadwriteArrayDyn","as_array","as_array_mut","as_matrix","as_matrix","as_matrix_mut","as_matrix_mut","as_slice","as_slice_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","drop","drop","extract","extract","fmt","fmt","from","from","from_subset","from_subset","get","get_mut","into","into","is_in_subset","is_in_subset","resize","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_as_matrix","try_as_matrix_mut","try_from","try_from","try_into","try_into","type_id","type_id","Dim","Dim","IntoPyArray","Item","Item","NpyIndex","ToNpyDims","ToPyArray","into_pyarray","to_pyarray","ABBREV","Datetime","Timedelta","UNIT","Unit","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","from","from","from","from","from_subset","from_subset","get_dtype","get_dtype","hash","hash","into","into","is_in_subset","is_in_subset","partial_cmp","partial_cmp","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","units","Attoseconds","Days","Femtoseconds","Hours","Microseconds","Milliseconds","Minutes","Months","Nanoseconds","Picoseconds","Seconds","Weeks","Years","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","array","flags","objects","types","ufunc","NPY_NUMUSERTYPES","NpyIter_AdvancedNew","NpyIter_Copy","NpyIter_CreateCompatibleStrides","NpyIter_Deallocate","NpyIter_DebugPrint","NpyIter_EnableExternalLoop","NpyIter_GetAxisStrideArray","NpyIter_GetBufferSize","NpyIter_GetDataPtrArray","NpyIter_GetDescrArray","NpyIter_GetGetMultiIndex","NpyIter_GetIndexPtr","NpyIter_GetInitialDataPtrArray","NpyIter_GetInnerFixedStrideArray","NpyIter_GetInnerLoopSizePtr","NpyIter_GetInnerStrideArray","NpyIter_GetIterIndex","NpyIter_GetIterIndexRange","NpyIter_GetIterNext","NpyIter_GetIterSize","NpyIter_GetIterView","NpyIter_GetNDim","NpyIter_GetNOp","NpyIter_GetOperandArray","NpyIter_GetReadFlags","NpyIter_GetShape","NpyIter_GetWriteFlags","NpyIter_GotoIndex","NpyIter_GotoIterIndex","NpyIter_GotoMultiIndex","NpyIter_HasDelayedBufAlloc","NpyIter_HasExternalLoop","NpyIter_HasIndex","NpyIter_HasMultiIndex","NpyIter_IsBuffered","NpyIter_IsFirstVisit","NpyIter_IsGrowInner","NpyIter_IterationNeedsAPI","NpyIter_MultiNew","NpyIter_New","NpyIter_RemoveAxis","NpyIter_RemoveMultiIndex","NpyIter_RequiresBuffering","NpyIter_Reset","NpyIter_ResetBasePointers","NpyIter_ResetToIterIndexRange","NpyTypes","PY_ARRAY_API","PyArrayAPI","PyArrayDescr_Type","PyArrayFlags_Type","PyArrayIter_Type","PyArrayMultiIter_Type","PyArray_All","PyArray_Any","PyArray_Arange","PyArray_ArangeObj","PyArray_ArgMax","PyArray_ArgMin","PyArray_ArgPartition","PyArray_ArgSort","PyArray_As1D","PyArray_As2D","PyArray_AsCArray","PyArray_AxisConverter","PyArray_BoolConverter","PyArray_Broadcast","PyArray_BroadcastToShape","PyArray_BufferConverter","PyArray_ByteorderConverter","PyArray_Byteswap","PyArray_CanCastArrayTo","PyArray_CanCastSafely","PyArray_CanCastScalar","PyArray_CanCastTo","PyArray_CanCastTypeTo","PyArray_CanCoerceScalar","PyArray_CastAnyTo","PyArray_CastScalarDirect","PyArray_CastScalarToCtype","PyArray_CastTo","PyArray_CastToType","PyArray_CastingConverter","PyArray_Check","PyArray_CheckAnyScalarExact","PyArray_CheckAxis","PyArray_CheckExact","PyArray_CheckFromAny","PyArray_CheckStrides","PyArray_Choose","PyArray_Clip","PyArray_ClipmodeConverter","PyArray_CompareLists","PyArray_CompareString","PyArray_CompareUCS4","PyArray_Compress","PyArray_Concatenate","PyArray_Conjugate","PyArray_ConvertClipmodeSequence","PyArray_ConvertToCommonType","PyArray_Converter","PyArray_CopyAndTranspose","PyArray_CopyAnyInto","PyArray_CopyInto","PyArray_CopyObject","PyArray_Correlate","PyArray_Correlate2","PyArray_CountNonzero","PyArray_CreateSortedStridePerm","PyArray_CumProd","PyArray_CumSum","PyArray_DatetimeStructToDatetime","PyArray_DatetimeToDatetimeStruct","PyArray_DebugPrint","PyArray_DescrAlignConverter","PyArray_DescrAlignConverter2","PyArray_DescrConverter","PyArray_DescrConverter2","PyArray_DescrFromObject","PyArray_DescrFromScalar","PyArray_DescrFromType","PyArray_DescrFromTypeObject","PyArray_DescrNew","PyArray_DescrNewByteorder","PyArray_DescrNewFromType","PyArray_Diagonal","PyArray_Dump","PyArray_Dumps","PyArray_EinsteinSum","PyArray_ElementFromName","PyArray_ElementStrides","PyArray_Empty","PyArray_EnsureAnyArray","PyArray_EnsureArray","PyArray_EquivTypenums","PyArray_EquivTypes","PyArray_FailUnlessWriteable","PyArray_FieldNames","PyArray_FillObjectArray","PyArray_FillWithScalar","PyArray_Flatten","PyArray_Free","PyArray_FromAny","PyArray_FromArray","PyArray_FromArrayAttr","PyArray_FromBuffer","PyArray_FromDims","PyArray_FromDimsAndDataAndDescr","PyArray_FromFile","PyArray_FromInterface","PyArray_FromIter","PyArray_FromScalar","PyArray_FromString","PyArray_FromStructInterface","PyArray_GetArrayParamsFromObject","PyArray_GetCastFunc","PyArray_GetEndianness","PyArray_GetField","PyArray_GetNDArrayCFeatureVersion","PyArray_GetNDArrayCVersion","PyArray_GetNumericOps","PyArray_GetPriority","PyArray_GetPtr","PyArray_INCREF","PyArray_InitArrFuncs","PyArray_InnerProduct","PyArray_IntTupleFromIntp","PyArray_IntpConverter","PyArray_IntpFromSequence","PyArray_Item_INCREF","PyArray_Item_XDECREF","PyArray_IterAllButAxis","PyArray_IterNew","PyArray_LexSort","PyArray_MapIterArray","PyArray_MapIterArrayCopyIfOverlap","PyArray_MapIterNext","PyArray_MapIterSwapAxes","PyArray_MatrixProduct","PyArray_MatrixProduct2","PyArray_Max","PyArray_Mean","PyArray_Min","PyArray_MinScalarType","PyArray_MoveInto","PyArray_MultiplyIntList","PyArray_MultiplyList","PyArray_NeighborhoodIterNew","PyArray_New","PyArray_NewCopy","PyArray_NewFlagsObject","PyArray_NewFromDescr","PyArray_NewLikeArray","PyArray_Newshape","PyArray_Nonzero","PyArray_ObjectType","PyArray_One","PyArray_OrderConverter","PyArray_OutputConverter","PyArray_OverflowMultiplyList","PyArray_Partition","PyArray_Prod","PyArray_PromoteTypes","PyArray_Ptp","PyArray_PutMask","PyArray_PutTo","PyArray_PyIntAsInt","PyArray_PyIntAsIntp","PyArray_Ravel","PyArray_RegisterCanCast","PyArray_RegisterCastFunc","PyArray_RegisterDataType","PyArray_RemoveAxesInPlace","PyArray_RemoveSmallest","PyArray_Repeat","PyArray_Reshape","PyArray_Resize","PyArray_ResolveWritebackIfCopy","PyArray_ResultType","PyArray_Return","PyArray_Round","PyArray_Scalar","PyArray_ScalarAsCtype","PyArray_ScalarFromObject","PyArray_ScalarKind","PyArray_SearchSorted","PyArray_SearchsideConverter","PyArray_SelectkindConverter","PyArray_SetBaseObject","PyArray_SetDatetimeParseFunction","PyArray_SetField","PyArray_SetNumericOps","PyArray_SetStringFunction","PyArray_SetUpdateIfCopyBase","PyArray_SetWritebackIfCopyBase","PyArray_Size","PyArray_Sort","PyArray_SortkindConverter","PyArray_Squeeze","PyArray_Std","PyArray_Sum","PyArray_SwapAxes","PyArray_TakeFrom","PyArray_TimedeltaStructToTimedelta","PyArray_TimedeltaToTimedeltaStruct","PyArray_ToFile","PyArray_ToList","PyArray_ToString","PyArray_Trace","PyArray_Transpose","PyArray_Type","PyArray_TypeObjectFromType","PyArray_TypestrConvert","PyArray_UpdateFlags","PyArray_ValidType","PyArray_View","PyArray_Where","PyArray_XDECREF","PyArray_Zero","PyArray_Zeros","PyBigArray_Type","PyBoolArrType_Type","PyByteArrType_Type","PyCDoubleArrType_Type","PyCFloatArrType_Type","PyCLongDoubleArrType_Type","PyCharacterArrType_Type","PyComplexFloatingArrType_Type","PyDataMem_FREE","PyDataMem_NEW","PyDataMem_NEW_ZEROED","PyDataMem_RENEW","PyDataMem_SetEventHook","PyDoubleArrType_Type","PyFlexibleArrType_Type","PyFloatArrType_Type","PyFloatingArrType_Type","PyGenericArrType_Type","PyInexactArrType_Type","PyIntArrType_Type","PyIntegerArrType_Type","PyLongArrType_Type","PyLongDoubleArrType_Type","PyLongLongArrType_Type","PyNumberArrType_Type","PyObjectArrType_Type","PyShortArrType_Type","PySignedIntegerArrType_Type","PyStringArrType_Type","PyUByteArrType_Type","PyUIntArrType_Type","PyULongArrType_Type","PyULongLongArrType_Type","PyUShortArrType_Type","PyUnicodeArrType_Type","PyUnsignedIntegerArrType_Type","PyVoidArrType_Type","_PyArrayScalar_BoolValues","_PyArray_GetSigintBuf","_PyArray_SigintHandler","borrow","borrow","borrow_mut","borrow_mut","from","from","from_subset","from_subset","get_type_object","into","into","is_in_subset","is_in_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","NPY_ALIGNED_STRUCT","NPY_ARRAY_ALIGNED","NPY_ARRAY_BEHAVED","NPY_ARRAY_BEHAVED_NS","NPY_ARRAY_CARRAY","NPY_ARRAY_CARRAY_RO","NPY_ARRAY_C_CONTIGUOUS","NPY_ARRAY_DEFAULT","NPY_ARRAY_ELEMENTSTRIDES","NPY_ARRAY_ENSUREARRAY","NPY_ARRAY_ENSURECOPY","NPY_ARRAY_FARRAY","NPY_ARRAY_FARRAY_RO","NPY_ARRAY_FORCECAST","NPY_ARRAY_F_CONTIGUOUS","NPY_ARRAY_INOUT_ARRAY","NPY_ARRAY_INOUT_ARRAY2","NPY_ARRAY_INOUT_FARRAY","NPY_ARRAY_INOUT_FARRAY2","NPY_ARRAY_IN_ARRAY","NPY_ARRAY_IN_FARRAY","NPY_ARRAY_NOTSWAPPED","NPY_ARRAY_OUT_ARRAY","NPY_ARRAY_OUT_FARRAY","NPY_ARRAY_OWNDATA","NPY_ARRAY_UPDATEIFCOPY","NPY_ARRAY_UPDATE_ALL","NPY_ARRAY_WRITEABLE","NPY_ARRAY_WRITEBACKIFCOPY","NPY_FROM_FIELDS","NPY_ITEM_HASOBJECT","NPY_ITEM_IS_POINTER","NPY_ITEM_REFCOUNT","NPY_ITER_ALIGNED","NPY_ITER_ALLOCATE","NPY_ITER_ARRAYMASK","NPY_ITER_BUFFERED","NPY_ITER_COMMON_DTYPE","NPY_ITER_CONTIG","NPY_ITER_COPY","NPY_ITER_COPY_IF_OVERLAP","NPY_ITER_C_INDEX","NPY_ITER_DELAY_BUFALLOC","NPY_ITER_DONT_NEGATE_STRIDES","NPY_ITER_EXTERNAL_LOOP","NPY_ITER_F_INDEX","NPY_ITER_GLOBAL_FLAGS","NPY_ITER_GROWINNER","NPY_ITER_MULTI_INDEX","NPY_ITER_NBO","NPY_ITER_NO_BROADCAST","NPY_ITER_NO_SUBTYPE","NPY_ITER_OVERLAP_ASSUME_ELEMENTWISE","NPY_ITER_PER_OP_FLAGS","NPY_ITER_RANGED","NPY_ITER_READONLY","NPY_ITER_READWRITE","NPY_ITER_REDUCE_OK","NPY_ITER_REFS_OK","NPY_ITER_UPDATEIFCOPY","NPY_ITER_VIRTUAL","NPY_ITER_WRITEMASKED","NPY_ITER_WRITEONLY","NPY_ITER_ZEROSIZE_OK","NPY_LIST_PICKLE","NPY_NEEDS_INIT","NPY_NEEDS_PYAPI","NPY_OBJECT_DTYPE_FLAGS","NPY_USE_GETITEM","NPY_USE_SETITEM","NpyAuxData","NpyAuxData_CloneFunc","NpyAuxData_FreeFunc","NpyIter","NpyIter_GetMultiIndexFunc","NpyIter_IterNextFunc","PyArrayFlagsObject","PyArrayInterface","PyArrayIterObject","PyArrayMapIterObject","PyArrayMultiIterObject","PyArrayNeighborhoodIterObject","PyArrayObject","PyArray_ArgFunc","PyArray_ArgPartitionFunc","PyArray_ArgSortFunc","PyArray_ArrFuncs","PyArray_ArrayDescr","PyArray_Chunk","PyArray_CompareFunc","PyArray_CopySwapFunc","PyArray_CopySwapNFunc","PyArray_DatetimeDTypeMetaData","PyArray_DatetimeMetaData","PyArray_Descr","PyArray_Dims","PyArray_DotFunc","PyArray_FastClipFunc","PyArray_FastPutmaskFunc","PyArray_FastTakeFunc","PyArray_FillFunc","PyArray_FillWithScalarFunc","PyArray_FromStrFunc","PyArray_GetItemFunc","PyArray_NonzeroFunc","PyArray_PartitionFunc","PyArray_ScalarKindFunc","PyArray_ScanFunc","PyArray_SetItemFunc","PyArray_SortFunc","PyArray_VectorUnaryFunc","PyDataMem_EventHookFunc","PyUFuncGenericFunction","PyUFuncObject","PyUFunc_LegacyInnerLoopSelectionFunc","PyUFunc_MaskedInnerLoopSelectionFunc","PyUFunc_MaskedStridedInnerLoopFunc","PyUFunc_TypeResolutionFunc","_internal_iter","ait","alignment","ao","ao","argmax","argmin","argsort","arr","array","backstrides","backstrides","base","base","base","base","base","baseoffset","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","byteorder","c_metadata","cancastscalarkindto","cancastto","cast","castdict","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compare","consec","constant","contiguous","contiguous","coordinates","coordinates","copyswap","copyswapn","core_dim_ixs","core_enabled","core_num_dim_ix","core_num_dims","core_offsets","core_signature","data","data","data","dataptr","dataptr","dataptr","descr","descr","dimensions","dimensions","dimensions","dimensions","dims_m1","dims_m1","doc","dotfunc","elsize","extra_op","extra_op_dtype","extra_op_flags","extra_op_iter","extra_op_next","extra_op_ptrs","f","factors","factors","fancy_dims","fancy_strides","fastclip","fastputmask","fasttake","fields","fill","fillwithscalar","flags","flags","flags","flags","flags","fmt","free","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","fromstr","functions","getitem","hash","identity","index","index","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","itemsize","iter_count","iter_flags","iteraxes","iters","kind","legacy_inner_loop_selector","len","len","limits","limits","limits_sizes","limits_sizes","masked_inner_loop_selector","meta","metadata","mode","name","names","nargs","nd","nd","nd","nd","nd","nd_fancy","nd_m1","nd_m1","needs_api","nin","nonzero","nout","npy_iter_get_dataptr_t","ntypes","num","numiter","numiter","ob_base","ob_base","ob_base","ob_base","ob_base","ob_base","ob_base","ob_base","ob_base","obj","op_flags","outer","outer_next","outer_ptrs","outer_strides","ptr","ptr","ptr","reserved","reserved1","reserved2","scalarkind","scanfunc","setitem","shape","shape","size","size","size","size","sort","strides","strides","strides","strides","subarray","subspace","subspace_iter","subspace_next","subspace_ptrs","subspace_strides","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","translate","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_num","type_resolver","typekind","typeobj","types","unused","userloops","weakreflist","NPY_ANYORDER","NPY_BIG","NPY_BOOL","NPY_BOOLLTR","NPY_BOOL_SCALAR","NPY_BYTE","NPY_BYTELTR","NPY_BYTEORDER_CHAR","NPY_CASTING","NPY_CDOUBLE","NPY_CDOUBLELTR","NPY_CFLOAT","NPY_CFLOATLTR","NPY_CHAR","NPY_CHARLTR","NPY_CLIP","NPY_CLIPMODE","NPY_CLONGDOUBLE","NPY_CLONGDOUBLELTR","NPY_COMPLEXLTR","NPY_COMPLEX_SCALAR","NPY_CORDER","NPY_DATETIME","NPY_DATETIMELTR","NPY_DATETIMEUNIT","NPY_DOUBLE","NPY_DOUBLELTR","NPY_EQUIV_CASTING","NPY_FLOAT","NPY_FLOATINGLTR","NPY_FLOATLTR","NPY_FLOAT_SCALAR","NPY_FORTRANORDER","NPY_FR_D","NPY_FR_GENERIC","NPY_FR_M","NPY_FR_W","NPY_FR_Y","NPY_FR_as","NPY_FR_fs","NPY_FR_h","NPY_FR_m","NPY_FR_ms","NPY_FR_ns","NPY_FR_ps","NPY_FR_s","NPY_FR_us","NPY_GENBOOLLTR","NPY_HALF","NPY_HALFLTR","NPY_HEAPSORT","NPY_IGNORE","NPY_INT","NPY_INTLTR","NPY_INTNEG_SCALAR","NPY_INTPLTR","NPY_INTPOS_SCALAR","NPY_INTROSELECT","NPY_KEEPORDER","NPY_LITTLE","NPY_LONG","NPY_LONGDOUBLE","NPY_LONGDOUBLELTR","NPY_LONGLONG","NPY_LONGLONGLTR","NPY_LONGLTR","NPY_MERGESORT","NPY_NATBYTE","NPY_NATIVE","NPY_NOSCALAR","NPY_NOTYPE","NPY_NO_CASTING","NPY_NTYPES","NPY_OBJECT","NPY_OBJECTLTR","NPY_OBJECT_SCALAR","NPY_OPPBYTE","NPY_ORDER","NPY_QUICKSORT","NPY_RAISE","NPY_SAFE_CASTING","NPY_SAME_KIND_CASTING","NPY_SCALARKIND","NPY_SEARCHLEFT","NPY_SEARCHRIGHT","NPY_SEARCHSIDE","NPY_SELECTKIND","NPY_SHORT","NPY_SHORTLTR","NPY_SIGNEDLTR","NPY_SORTKIND","NPY_STRING","NPY_STRINGLTR","NPY_STRINGLTR2","NPY_SWAP","NPY_TIMEDELTA","NPY_TIMEDELTALTR","NPY_TYPECHAR","NPY_TYPEKINDCHAR","NPY_TYPES","NPY_UBYTE","NPY_UBYTELTR","NPY_UINT","NPY_UINTLTR","NPY_UINTPLTR","NPY_ULONG","NPY_ULONGLONG","NPY_ULONGLONGLTR","NPY_ULONGLTR","NPY_UNICODE","NPY_UNICODELTR","NPY_UNSAFE_CASTING","NPY_UNSIGNEDLTR","NPY_USERDEF","NPY_USHORT","NPY_USHORTLTR","NPY_VOID","NPY_VOIDLTR","NPY_WRAP","as_","as_","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","day","day","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hour","imag","imag","imag","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","min","month","npy_bool","npy_byte","npy_cdouble","npy_cfloat","npy_char","npy_clongdouble","npy_complex128","npy_complex256","npy_complex64","npy_datetime","npy_datetimestruct","npy_double","npy_float","npy_float128","npy_float16","npy_float32","npy_float64","npy_half","npy_hash_t","npy_int","npy_int16","npy_int32","npy_int64","npy_int8","npy_intp","npy_long","npy_longdouble","npy_longlong","npy_short","npy_stride_sort_item","npy_timedelta","npy_timedeltastruct","npy_ubyte","npy_ucs4","npy_uint","npy_uint16","npy_uint32","npy_uint64","npy_uint8","npy_uintp","npy_ulong","npy_ulonglong","npy_ushort","partial_cmp","perm","ps","ps","real","real","real","sec","sec","stride","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","us","us","year","PY_UFUNC_API","PyUFuncAPI","PyUFunc_DD_D","PyUFunc_D_D","PyUFunc_DefaultTypeResolver","PyUFunc_FF_F","PyUFunc_FF_F_As_DD_D","PyUFunc_F_F","PyUFunc_F_F_As_D_D","PyUFunc_FromFuncAndData","PyUFunc_FromFuncAndDataAndSignature","PyUFunc_FromFuncAndDataAndSignatureAndIdentity","PyUFunc_GG_G","PyUFunc_G_G","PyUFunc_GenericFunction","PyUFunc_GetPyValues","PyUFunc_OO_O","PyUFunc_OO_O_method","PyUFunc_O_O","PyUFunc_O_O_method","PyUFunc_On_Om","PyUFunc_RegisterLoopForDescr","PyUFunc_RegisterLoopForType","PyUFunc_ReplaceLoopBySignature","PyUFunc_SetUsesArraysAsData","PyUFunc_ValidateCasting","PyUFunc_checkfperr","PyUFunc_clearfperr","PyUFunc_d_d","PyUFunc_dd_d","PyUFunc_e_e","PyUFunc_e_e_As_d_d","PyUFunc_e_e_As_f_f","PyUFunc_ee_e","PyUFunc_ee_e_As_dd_d","PyUFunc_ee_e_As_ff_f","PyUFunc_f_f","PyUFunc_f_f_As_d_d","PyUFunc_ff_f","PyUFunc_ff_f_As_dd_d","PyUFunc_g_g","PyUFunc_getfperr","PyUFunc_gg_g","PyUFunc_handlefperr","borrow","borrow_mut","from","from_subset","into","is_in_subset","to_subset","to_subset_unchecked","try_from","try_into","type_id"],"q":["numpynumpy::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::convert","","","","","","","","","","numpy::datetime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::datetime::unitsnumpy::npyffi","","","","","numpy::npyffi::arraynumpy::npyffi::flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::npyffi::objects","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::npyffi::typesnumpy::npyffi::ufunc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The given array is already borrowed","Inidcates why borrowing an array failed.","","","Represents that a type can be an element of <code>PyArray</code>.","Represents that given <code>Vec</code> cannot be treated as an array.","Flag that indicates whether this type is trivially …","","Create a one-dimensional index","one-dimensional","Create a two-dimensional index","two-dimensional","Create a three-dimensional index","three-dimensional","Create a four-dimensional index","four-dimensional","Create a five-dimensional index","five-dimensional","Create a six-dimensional index","six-dimensional","Create a dynamic-dimensional index","dynamic-dimensional","Represents that the given array is not contiguous.","The given array is not writeable","","","","","","","","","","","","Binding of <code>numpy.dtype</code>.","","","","","","","","","","","","","","","","","","","","Returns the required alignment (bytes) of this type …","","","","Safe interface for NumPy’s N-dimensional arrays","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Returns <code>self</code> as <code>*mut PyArray_Descr</code>.","Gets the underlying FFI pointer, returns a borrowed …","","Returns the type descriptor for the base element of …","Types to safely create references into NumPy arrays","","","","","","","","","Returns an ASCII character indicating the byte-order of …","Returns a unique ASCII character for each of the 21 …","Defines conversion traits between Rust types and NumPy …","Support datetimes and timedeltas","","Return the dot product of two arrays.","Returns the type descriptor (“dtype”) for a registered …","Return the Einstein summation convention of given tensors.","Return the Einstein summation convention of given tensors.","","Returns bit-flags describing how this type descriptor is …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the associated type descriptor (“dtype”) for …","","","Returns the type descriptor and offset of the field with …","Returns true if the type descriptor is a structured type.","Returns true if the type descriptor contains any …","Returns true if the type descriptor is a sub-array.","Return the inner product of two arrays.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>self</code> as <code>*mut PyArray_Descr</code> while increasing the …","","Returns true if the type descriptor is a struct which …","Returns true if two type descriptors are equivalent.","","","","","Returns true if type descriptor byteorder is native, or …","","Returns the element size of this type descriptor.","Returns an ASCII character (one of <code>biufcmMOSUV</code>) …","","Returns an ordered list of field names, or <code>None</code> if there …","","Returns the number of dimensions if this type descriptor …","Creates a new type descriptor (“dtype”) object from an …","Low-Level bindings for NumPy C API.","Returns a unique number for each of the 21 different …","Shortcut for creating a type descriptor of <code>object</code> type.","Returns the type descriptor for a registered type.","","","","Create a <code>PyArray</code> with one, two or three dimensions.","","Returns the shape of the sub-array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the array scalar corresponding to this type …","A safe, statically-typed wrapper for NumPy’s <code>ndarray</code> …","Zero-dimensional array.","One-dimensional array.","Two-dimensional array.","Three-dimensional array.","Four-dimensional array.","Five-dimensional array.","Six-dimensional array.","Dynamic-dimensional array.","Return evenly spaced values within a given interval.","Returns an <code>ArrayView</code> of the internal array.","Returns an <code>ArrayViewMut</code> of the internal array.","Returns a raw pointer to the underlying <code>PyArrayObject</code>.","Gets the underlying FFI pointer, returns a borrowed …","Returns the internal array as <code>RawArrayView</code> enabling …","Returns the internal array as <code>RawArrayViewMut</code> enabling …","","Returns an immutable view of the internal data as a slice.","Returns a mutable view of the internal data as a slice.","","Creates a NumPy array backed by <code>array</code> and ties its …","","Cast the <code>PyArray&lt;T&gt;</code> to <code>PyArray&lt;U&gt;</code>, by allocating a new …","Copies <code>self</code> into <code>other</code>, performing a data type conversion …","Returns a pointer to the first element of the array.","","Same as <code>shape</code>, but returns <code>D</code> insead of <code>&amp;[usize]</code>.","Returns the <code>dtype</code> of the array.","","","","Returns the argument unchanged.","Construct a NumPy array from a <code>ndarray::ArrayBase</code>.","Constructs a reference to a <code>PyArray</code> from a raw point to a …","","Construct a one-dimensional array from an <code>ExactSizeIterator</code>…","Construct a one-dimensional array from an <code>Iterator</code>.","Constructs a NumPy from an <code>ndarray::Array</code>","Construct a NumPy array containing objects stored in a …","Constructs a reference to a <code>PyArray</code> from a raw pointer to …","","Construct a one-dimensional array from a slice.","","Construct a one-dimensional array from a <code>Vec&lt;T&gt;</code>.","Construct a two-dimension array from a <code>Vec&lt;Vec&lt;T&gt;&gt;</code>.","Construct a three-dimensional array from a <code>Vec&lt;Vec&lt;Vec&lt;T&gt;&gt;&gt;</code>…","Get a reference of the specified element if the given …","Returns a handle to NumPy’s multiarray module.","Same as <code>get</code>, but returns <code>Option&lt;&amp;mut T&gt;</code>.","Get a copy of the specified element in the array.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the internal data of the array is …","Returns <code>true</code> if the internal data of the array is …","Returns <code>true</code> if the there are no elements in the array.","Returns <code>true</code> if the internal data of the array is …","","","Get the single element of a zero-dimensional array.","Calculates the total number of elements in the array.","Returns the number of dimensions of the array.","Creates a new uninitialized NumPy array.","Get an immutable borrow of the NumPy array","Get a mutable borrow of the NumPy array","Special case of <code>reshape_with_order</code> which keeps the memory …","Construct a new array which has same values as self, but …","Extends or truncates the dimensions of an array.","Returns a slice which contains dimmensions of the array.","Returns a slice indicating how many bytes to advance when …","Turn an array with fixed dimensionality into one with …","","Turn <code>&amp;PyArray&lt;T,D&gt;</code> into <code>Py&lt;PyArray&lt;T,D&gt;&gt;</code>, i.e. a pointer …","Get a copy of the array as an <code>ndarray::Array</code>.","","","","Returns a copy of the internal data of the array as a <code>Vec</code>.","Try to convert this array into a <code>nalgebra::MatrixView</code> …","Try to convert this array into a <code>nalgebra::MatrixViewMut</code> …","","","","","","Get an immutable borrow of the NumPy array","Get a mutable borrow of the NumPy array","","","Get an immutable reference of the specified element, …","Same as <code>uget</code>, but returns <code>&amp;mut T</code>.","Same as <code>uget</code>, but returns <code>*mut T</code>.","Construct a new NumPy array filled with zeros.","Read-only borrow of an array.","Read-only borrow of a one-dimensional array.","Read-only borrow of a two-dimensional array.","Read-only borrow of a three-dimensional array.","Read-only borrow of a four-dimensional array.","Read-only borrow of a five-dimensional array.","Read-only borrow of a six-dimensional array.","Read-only borrow of an array whose dimensionality is …","Read-write borrow of an array.","Read-write borrow of a one-dimensional array.","Read-write borrow of a two-dimensional array.","Read-write borrow of a three-dimensional array.","Read-write borrow of a four-dimensional array.","Read-write borrow of a five-dimensional array.","Read-write borrow of a six-dimensional array.","Read-write borrow of an array whose dimensionality is …","Provides an immutable array view of the interior of the …","Provides a mutable array view of the interior of the NumPy …","Convert this two-dimensional array into a …","Convert this one-dimensional array into a …","Convert this one-dimensional array into a …","Convert this two-dimensional array into a …","Provide an immutable slice view of the interior of the …","Provide a mutable slice view of the interior of the NumPy …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Provide an immutable reference to an element of the NumPy …","Provide a mutable reference to an element of the NumPy …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extends or truncates the dimensions of an array.","","","","","","Try to convert this array into a <code>nalgebra::MatrixView</code> …","Try to convert this array into a <code>nalgebra::MatrixViewMut</code> …","","","","","","","The dimension type of the resulting array.","The dimension type of the resulting array.","Conversion trait from owning Rust types into <code>PyArray</code>.","The element type of resulting array.","The element type of resulting array.","Trait implemented by types that can be used to index an …","Utility trait to specify the dimensions of an array.","Conversion trait from borrowing Rust types to <code>PyArray</code>.","Consumes <code>self</code> and moves its data into a NumPy array.","Copies the content pointed to by <code>&amp;self</code> into a newly …","The abbrevation used for debug formatting","Corresponds to the <code>datetime64</code> scalar type","Corresponds to the [<code>timedelta64</code>][scalars-datetime64] …","The matching NumPy datetime unit code","Represents the datetime units supported by NumPy","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","Predefined implementors of the <code>Unit</code> trait","Attoseconds, i.e. 10^-18 seconds","Days, i.e. 24 hours","Femtoseconds, i.e. 10^-15 seconds","Hours, i.e. 60 minutes","Microseconds, i.e. 10^-6 seconds","Milliseconds, i.e. 10^-3 seconds","Minutes, i.e. 60 seconds","Months, i.e. 30 days","Nanoseconds, i.e. 10^-9 seconds","Picoseconds, i.e. 10^-12 seconds","Seconds","Weeks, i.e. 7 days","Years, i.e. 12 months","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Low-Level binding for Array API","","Low-Lebel binding for NumPy C API C-objects","","Low-Level binding for UFunc API","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All type objects exported by the NumPy API.","A global variable which stores a ‘capsule’ pointer to …","See PY_ARRAY_API for more.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that <code>op</code> is an instance of <code>PyArray</code> or not.","","","Checks that <code>op</code> is an exact instance of <code>PyArray</code> or noteturns the argument unchanged.","Returns the argument unchanged.","","","Get a pointer of the type object assocaited with <code>ty</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeglobal variable which stores a ‘capsule’ pointer to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[9,0,0,0,0,0,33,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,8,9,0,0,4,4,4,4,0,4,5,8,9,4,5,8,9,4,4,0,0,4,0,0,0,0,4,4,4,4,5,5,8,8,9,9,4,5,8,9,4,4,4,5,8,9,0,33,133,134,4,4,4,4,0,4,5,8,9,4,4,4,4,4,5,8,9,4,4,4,4,0,4,0,4,4,0,4,4,4,5,8,9,0,0,4,4,4,5,8,9,4,5,8,9,4,5,8,9,4,4,5,8,9,4,4,4,5,8,9,4,5,8,9,4,4,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,51,52,51,51,52,52,51,52,51,52,51,52,51,51,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,51,52,52,51,51,52,51,52,51,52,51,52,51,52,51,52,135,136,0,135,136,0,0,0,135,136,61,0,0,61,0,62,63,62,63,62,63,62,63,62,63,62,63,62,63,62,62,63,63,62,63,62,63,62,63,62,63,62,63,62,63,62,63,62,63,62,63,62,63,62,63,62,63,0,0,0,0,0,0,0,0,0,0,0,0,0,0,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,70,71,72,73,74,75,76,77,78,79,80,81,82,0,0,0,0,0,115,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,0,0,115,115,115,115,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,0,83,83,0,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,83,115,83,83,83,83,83,83,83,83,83,115,115,115,115,115,115,115,115,83,83,83,83,83,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,115,83,83,83,115,83,115,83,115,83,115,83,83,115,83,115,83,115,83,115,83,115,83,115,83,115,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,109,10,110,120,107,107,107,117,109,110,120,40,116,95,122,123,109,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,110,120,10,10,107,107,107,107,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,121,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,107,109,120,110,120,110,120,107,107,119,119,119,119,119,119,40,118,119,110,120,109,40,118,40,94,120,109,110,120,119,107,10,109,109,109,109,109,109,10,110,120,109,109,107,107,107,10,107,107,40,10,117,95,118,87,121,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,107,119,107,10,119,110,94,120,109,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,118,109,119,109,94,10,119,108,95,110,120,110,120,119,123,10,120,119,10,119,40,118,94,120,109,109,110,120,109,119,107,119,0,119,122,94,109,40,10,117,95,119,110,94,120,109,119,119,109,109,109,109,108,95,119,121,119,119,107,107,107,116,118,110,94,120,109,107,40,118,110,120,10,109,109,109,109,109,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,110,120,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,118,10,40,10,116,107,117,108,95,118,119,87,110,94,120,109,121,122,123,10,119,118,10,119,109,119,40,54,130,127,128,96,127,128,0,0,127,128,127,128,127,128,97,0,127,128,129,96,54,127,128,0,127,128,85,127,129,128,96,54,100,100,100,100,100,100,100,100,100,100,100,100,100,100,129,127,128,92,130,127,128,96,128,96,91,54,130,127,127,128,127,128,128,92,130,130,96,127,85,127,127,128,96,130,0,92,97,85,85,0,111,111,0,0,127,128,129,0,127,128,128,130,127,128,0,0,0,127,128,127,128,128,127,127,128,128,127,128,85,129,127,127,128,127,128,97,101,112,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,127,101,112,54,96,92,111,100,127,91,85,97,130,124,125,126,54,96,92,111,100,127,91,85,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,54,96,92,111,100,127,91,85,97,130,101,124,125,126,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,101,101,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,127,99,101,112,124,125,126,101,112,99,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,124,125,126,54,96,92,111,100,127,91,85,97,101,112,99,128,129,130,101,112,101,0,0,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131,131],"f":[0,0,0,0,0,0,0,0,[1,2],0,[[1,1],2],0,[[1,1,1],2],0,[[1,1,1,1],2],0,[[1,1,1,1,1],2],0,[[1,1,1,1,1,1],2],0,[[],[[2,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[4,1],[[5,6],7],[[8,6],7],[[9,6],7],0,0,[4,10],[4,11],[4,12],[4,4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,13],[4,13],0,0,[4,12],[[14,14],15],[6,4],[16,15],0,[12,[[15,[4]]]],[4,17],[[4,18],[[20,[19]]]],[[4,18],[[20,[19]]]],[[5,18],21],[[5,18],21],[[8,18],21],[[8,18],21],[[9,18],21],[[9,18],21],[[]],[[]],[[]],[[]],[[6,11],22],[[6,11],22],[[]],[[]],[[]],[[]],0,[6,4],[6,4],[6,4],[[4,16],15],[4,23],[4,23],[4,23],[[14,14],15],[[]],[[]],[[]],[[]],[4,10],[[4,6],[[24,[4]]]],[4,23],[[4,4],23],[[],23],[[],23],[[],23],[[],23],[4,[[22,[23]]]],[12,23],[4,1],[4,13],0,[4,[[22,[[25,[16]]]]]],0,[4,1],[6,[[15,[4]]]],0,[4,26],[6,4],[6,4],[27],[27],[27],0,0,[4,[[25,[1]]]],[[4,6],7],[[],28],[[],28],[[],28],[[],28],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[],[[20,[29]]]],[[],20],[[],20],[[],20],[[],20],[[],[[20,[29]]]],[[]],[[],20],[[],20],[[],20],[[],20],[[],30],[[],30],[[],30],[[],30],[6,31],[4,32],0,0,0,0,0,0,0,0,0,[[6,[0,[33,[35,[34]]]],[0,[33,[35,[34]]]],[0,[33,[35,[34]]]]],[[14,[[0,[33,[35,[34]]]],36]]]],[[[14,[33,37]]],[[38,[33,37]]]],[[[14,[33,37]]],[[39,[33,37]]]],[14,40],[14,11],[[[14,[33,37]]],[[41,[33,37]]]],[[[14,[33,37]]],[[42,[33,37]]]],[14,12],[[[14,[33,37]]],[[20,[8]]]],[[[14,[33,37]]],[[20,[8]]]],[[]],[[43,12],[[14,[33,37]]]],[[]],[[[14,[33]],23],[[15,[14]]]],[[[14,[33]],14],15],[14],[14,12],[[[14,[33,37]]],37],[14,4],[12,[[15,[14]]]],[[14,18],[[20,[19]]]],[[14,18],[[20,[19]]]],[[]],[[6,43],[[14,[33,37]]]],[[6,11],14],[[6,11],22],[6,[[14,[33,36]]]],[6,[[14,[33,36]]]],[[6,[44,[33,37]]],[[14,[33,37]]]],[[6,[44,[24,37]]],[[14,[7,37]]]],[[6,11],14],[[6,11],22],[6,[[14,[33,36]]]],[[]],[[6,[25,[33]]],[[14,[33,36]]]],[6,[[20,[[14,[33,45]],5]]]],[6,[[20,[[14,[33,46]],5]]]],[[[14,[33,37]],47],22],[6,[[15,[48]]]],[[[14,[33,37]],47],22],[[[14,[33,37]]],[[22,[33]]]],[[]],[[14,6],7],[[14,6],[[24,[14]]]],[14,23],[14,23],[14,23],[14,23],[[],23],[12,23],[[[14,[[0,[49,33]],50]]],[[0,[49,33]]]],[14,1],[14,1],[[6,23],[[14,[33,37]]]],[[[14,[33,37]]],[[51,[33,37]]]],[[[14,[33,37]]],[[52,[33,37]]]],[[[14,[33]],53],[[15,[14]]]],[[[14,[33]],53,54],[[15,[14]]]],[[[14,[33]],53],15],[14],[14],[[[14,[33,37]]],14],[[14,6],7],[14,[[24,[14]]]],[[[14,[33,37]]],[[44,[33,37]]]],[[],28],[[],22],[[]],[[[14,[33,37]]],[[20,[[25,[33]],8]]]],[14,[[22,[55]]]],[14,[[22,[56]]]],[[],[[20,[29]]]],[[],20],[[],[[20,[29]]]],[[]],[[],20],[[[14,[33,37]]],[[20,[[51,[33,37]],9]]]],[[[14,[33,37]]],[[20,[[52,[33,37]],9]]]],[[],30],[6,31],[[[14,[33,37]]]],[[[14,[33,37]]]],[[[14,[33,37]]]],[[6,23],[[14,[33,37]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[51,38],[52,39],[[[51,[45]]],[[58,[57,57]]]],[[[51,[36]]],[[58,[57,57]]]],[[[52,[36]]],[[59,[57,57]]]],[[[52,[45]]],[[59,[57,57]]]],[51,[[20,[8]]]],[52,[[20,[8]]]],[[]],[[]],[[]],[[]],[51,51],[[]],[51],[52],[51],[52],[12,[[15,[[51,[33,37]]]]]],[12,[[15,[[52,[33,37]]]]]],[[51,18],21],[[52,18],21],[[]],[[]],[[]],[[]],[51,22],[52,22],[[]],[[]],[[],23],[[],23],[[[52,[36]],53],[[15,[[52,[36]]]]]],[[]],[[],22],[[],22],[[]],[[]],[51,[[22,[55]]]],[52,[[22,[56]]]],[[],20],[[],20],[[],20],[[],20],[[],30],[[],30],0,0,0,0,0,0,0,0,[6,14],[6,14],0,0,0,0,0,[[]],[[]],[[]],[[]],[[[62,[[0,[60,61]]]]],[[62,[[0,[60,61]]]]]],[[[63,[[0,[60,61]]]]],[[63,[[0,[60,61]]]]]],[[]],[[]],[[[62,[[0,[64,61]]]],62],65],[[[63,[[0,[64,61]]]],63],65],[[[62,[[0,[66,61]]]],62],23],[[[63,[[0,[66,61]]]],63],23],[[[62,[61]],18],21],[[[63,[61]],18],21],[67,[[62,[61]]]],[[]],[[]],[67,[[63,[61]]]],[[]],[[]],[6,4],[6,4],[[[62,[[0,[68,61]]]]]],[[[63,[[0,[68,61]]]]]],[[]],[[]],[[],23],[[],23],[[[62,[[0,[69,61]]]],62],[[22,[65]]]],[[[63,[[0,[69,61]]]],63],[[22,[65]]]],[[]],[[]],[[],22],[[],22],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],30],[[],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[82,82],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[70,70],65],[[71,71],65],[[72,72],65],[[73,73],65],[[74,74],65],[[75,75],65],[[76,76],65],[[77,77],65],[[78,78],65],[[79,79],65],[[80,80],65],[[81,81],65],[[82,82],65],[[70,70],23],[[71,71],23],[[72,72],23],[[73,73],23],[[74,74],23],[[75,75],23],[[76,76],23],[[77,77],23],[[78,78],23],[[79,79],23],[[80,80],23],[[81,81],23],[[82,82],23],[[70,18],21],[[71,18],21],[[72,18],21],[[73,18],21],[[74,18],21],[[75,18],21],[[76,18],21],[[77,18],21],[[78,18],21],[[79,18],21],[[80,18],21],[[81,18],21],[[82,18],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[82],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[70,70],[[22,[65]]]],[[71,71],[[22,[65]]]],[[72,72],[[22,[65]]]],[[73,73],[[22,[65]]]],[[74,74],[[22,[65]]]],[[75,75],[[22,[65]]]],[[76,76],[[22,[65]]]],[[77,77],[[22,[65]]]],[[78,78],[[22,[65]]]],[[79,79],[[22,[65]]]],[[80,80],[[22,[65]]]],[[81,81],[[22,[65]]]],[[82,82],[[22,[65]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,0,0,0,0,0,[[83,6,26,40,84,54,85,84,10,26,26,86,86],87],[[83,6,87],87],[[83,6,87,86,86],26],[[83,6,87],26],[[83,6,87]],[[83,6,87],26],[[83,6,87,26],86],[[83,6,87],86],[[83,6,87],17],[[83,6,87],10],[[83,6,87,17],88],[[83,6,87],86],[[83,6,87],17],[[83,6,87,86]],[[83,6,87],86],[[83,6,87],86],[[83,6,87],86],[[83,6,87,86,86]],[[83,6,87,17],89],[[83,6,87],86],[[83,6,87,86],40],[[83,6,87],26],[[83,6,87],26],[[83,6,87],40],[[83,6,87,17]],[[83,6,87,86],26],[[83,6,87,17]],[[83,6,87,86],26],[[83,6,87,86],26],[[83,6,87,86],26],[[83,6,87],90],[[83,6,87],90],[[83,6,87],90],[[83,6,87],90],[[83,6,87],90],[[83,6,87,26],90],[[83,6,87],90],[[83,6,87],90],[[83,6,26,40,84,54,85,84,10],87],[[83,6,40,84,54,85,10],87],[[83,6,87,26],26],[[83,6,87],26],[[83,6,87],90],[[83,6,87,17],26],[[83,6,87,17,17],26],[[83,6,87,86,86,17],26],0,0,0,0,0,0,0,[[83,6,40,26,40],11],[[83,6,40,26,40],11],[[83,6,34,34,34,26],11],[[83,6,11,11,11,10],11],[[83,6,40,26,40],11],[[83,6,40,26,40],11],[[83,6,40,40,26,91],11],[[83,6,40,26,92],11],[[83,6,11,17,26,26],26],[[83,6,11,17,26,26,26],26],[[83,6,11,93,86,26,10],26],[[83,6,11,26],26],[[83,6,11,90],26],[[83,6,94],26],[[83,6,11,86,26],11],[[83,6,11,95],26],[[83,6,11,17],26],[[83,6,40,90],11],[[83,6,40,10,85],90],[[83,6,26,26],26],[[83,6,31,31],90],[[83,6,10,10],90],[[83,6,10,10,85],90],[[83,6,26,26,96],26],[[83,6,40,40],26],[[83,6,11,10,93,26],26],[[83,6,11,93,10],26],[[83,6,40,40],26],[[83,6,40,10,26],11],[[83,6,11,85],26],[[6,11],26],[[83,6,11],26],[[83,6,40,26,26],11],[[6,11],26],[[83,6,11,10,26,26,26,11],11],[[83,6,26,26,86,86,86,86],90],[[83,6,40,11,40,97],11],[[83,6,40,11,11,40],11],[[83,6,11,97],26],[[83,6,86,86,26],26],[[83,6,17,17,1],26],[[83,6,98,98,1],26],[[83,6,40,11,26,40],11],[[83,6,11,26],11],[[83,6,40,40],11],[[83,6,11,97,26],26],[[83,6,11,26],40],[[83,6,11,11],26],[[83,6,11],11],[[83,6,40,40],26],[[83,6,40,40],26],[[83,6,40,11],26],[[83,6,11,11,26],11],[[83,6,11,11,26],11],[[83,6,40],86],[[83,6,26,86,99]],[[83,6,40,26,26,40],11],[[83,6,40,26,26,40],11],[[83,6,100,101],102],[[83,6,102,100,101]],[[83,6,40]],[[83,6,11,10],26],[[83,6,11,10],26],[[83,6,11,10],26],[[83,6,11,10],26],[[83,6,11,10],10],[[83,6,11],10],[[83,6,26],10],[[83,6,11],10],[[83,6,10],10],[[83,6,10,17],10],[[83,6,26],10],[[83,6,40,26,26,26],11],[[83,6,11,11,26],26],[[83,6,11,26],11],[[83,6,17,86,40,10,54,85,40],11],[[83,6,17],26],[[83,6,11],26],[[83,6,26,86,10,26],11],[[83,6,11],11],[[83,6,11],11],[[83,6,26,26],103],[[83,6,10,10],103],[[83,6,40,17],26],[[83,6,11],11],[[83,6,40,11]],[[83,6,40,11],26],[[83,6,40,54],11],[[83,6,11,93],26],[[83,6,11,10,26,26,26,11],11],[[83,6,40,10,26],11],[[83,6,11,10,11],11],[[83,6,11,10,86,86],11],[[83,6,26,26,26],11],[[83,6,26,26,10,17],11],[[83,6,104,10,86,17],11],[[83,6,11],11],[[83,6,11,10,86],11],[[83,6,11,10],11],[[83,6,17,86,10,86,17],11],[[83,6,11],11],[[83,6,11,10,90,10,26,86,40,11],26],[[83,6,10,26],105],[[83,6],26],[[83,6,40,10,26],11],[[83,6],106],[[83,6],106],[[83,6],11],[[83,6,11,34],34],[[83,6,40,86],93],[[83,6,40],26],[[83,6,107]],[[83,6,11,11],11],[[83,6,26,86],11],[[83,6,11,108],26],[[83,6,11,86,26],26],[[83,6,17,10]],[[83,6,17,10]],[[83,6,11,26],11],[[83,6,11],11],[[83,6,11,26],11],[[83,6,40,11],11],[[83,6,40,11,26,40],11],[[83,6,109]],[[83,6,109,40,26]],[[83,6,11,11],11],[[83,6,11,11,40],11],[[83,6,40,26,40],11],[[83,6,40,26,26,40],11],[[83,6,40,26,40],11],[[83,6,40],10],[[83,6,40,40],26],[[83,6,26,26],26],[[83,6,86,26],86],[[83,6,110,86,26,40],11],[[83,6,31,26,86,26,86,93,26,26,11],11],[[83,6,40,54],11],[[83,6,11],11],[[83,6,31,10,26,86,86,93,26,11],11],[[83,6,40,54,10,26],11],[[83,6,40,108,54],11],[[83,6,40],11],[[83,6,11,26],26],[[83,6,40],17],[[83,6,11,54],26],[[83,6,11,40],26],[[83,6,86,26],86],[[83,6,40,40,26,91],26],[[83,6,40,26,26,40],11],[[83,6,10,10],10],[[83,6,40,26,40],11],[[83,6,40,11,11],11],[[83,6,40,11,11,97],11],[[83,6,11],26],[[83,6,11],86],[[83,6,40,54],11],[[83,6,10,26,96],26],[[83,6,10,26,105],26],[[83,6,10],26],[[83,6,40,90]],[[83,6,94],26],[[83,6,40,11,26],11],[[83,6,40,11],11],[[83,6,40,108,26,54],11],[[83,6,40],26],[[83,6,86,40,86,10],10],[[83,6,40],11],[[83,6,40,26,40],11],[[83,6,93,10,11],11],[[83,6,11,93]],[[83,6,11],11],[[83,6,26,40],96],[[83,6,40,11,111,11],11],[[83,6,11,93],26],[[83,6,11,91],26],[[83,6,40,11],26],[[83,6,11]],[[83,6,40,10,26,11],26],[[83,6,11],26],[[83,6,11,26]],[[83,6,40,40],26],[[83,6,40,40],26],[[83,6,11],86],[[83,6,40,26,92],26],[[83,6,11,92],26],[[83,6,40],11],[[83,6,40,26,26,40,26],11],[[83,6,40,26,26,40],11],[[83,6,40,26,26],11],[[83,6,40,11,26,40,97],11],[[83,6,100,112],102],[[83,6,113,100,112]],[[83,6,40,104,17,17],26],[[83,6,40],11],[[83,6,40,54],11],[[83,6,40,26,26,26,26,40],11],[[83,6,40,108],11],0,[[83,6,26],11],[[83,6,26,26],26],[[83,6,40,26]],[[83,6,26],26],[[83,6,40,10,31],11],[[83,6,11,11,11],11],[[83,6,40],26],[[83,6,40],17],[[83,6,26,86,10,26],11],0,0,0,0,0,0,0,0,[[83,6,93]],[[83,6,1],93],[[83,6,1,1],93],[[83,6,93,1],93],[[83,6,114,93,93],114],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[83,6],93],[[83,6,26]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[83,6,115],31],[[]],[[]],[[],23],[[],23],[[],22],[[],22],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],30],[[],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[40,40],[10,10],[116,116],[107,107],[117,117],[108,108],[95,95],[118,118],[119,119],[87,87],[110,110],[94,94],[120,120],[109,109],[121,121],[122,122],[123,123],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[87,18],21],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[124,124],[125,125],[126,126],[54,54],[96,96],[92,92],[111,111],[100,100],[127,127],[91,91],[85,85],[97,97],[101,101],[112,112],[99,99],[128,128],[129,129],[130,130],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[127,127],65],0,0,[[54,54],23],[[96,96],23],[[92,92],23],[[111,111],23],[[100,100],23],[[127,127],23],[[91,91],23],[[85,85],23],[[97,97],23],[[130,130],23],[[124,18],21],[[125,18],21],[[126,18],21],[[54,18],21],[[96,18],21],[[92,18],21],[[111,18],21],[[100,18],21],[[127,18],21],[[91,18],21],[[85,18],21],[[101,18],21],[[112,18],21],[[99,18],21],[[128,18],21],[[129,18],21],[[130,18],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[54],[96],[92],[111],[100],[127],[91],[85],[97],[130],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[127,127],[[22,[65]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],[[],30],0,0,0,0,0,[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,119,85,40,11,10],26],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,132,93,17,26,26,26,26,17,17,26],11],[[131,6,132,93,17,26,26,26,26,17,17,26,17],11],[[131,6,119,93,17,26,26,26,26,17,17,26,17,17],26],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,119,11,11,40],26],[[131,6,17,26,26,11],26],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,119,10,132,10,93],26],[[131,6,119,26,132,26,93],26],[[131,6,119,132,26,132],26],[[131,6,93,1],26],[[131,6,119,85,40,10],26],[[131,6,26,11,26],26],[[131,6]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6,17,86,86,93]],[[131,6],26],[[131,6,17,86,86,93]],[[131,6,26,11,26,26],26],[[]],[[]],[[]],[[]],[[]],[[],23],[[],22],[[]],[[],20],[[],20],[[],30]],"p":[[15,"usize"],[3,"Dim"],[3,"IxDynImpl"],[3,"PyArrayDescr"],[3,"FromVecError"],[3,"Python"],[6,"PyObject"],[3,"NotContiguousError"],[4,"BorrowError"],[3,"PyArray_Descr"],[3,"PyObject"],[3,"PyAny"],[15,"u8"],[3,"PyArray"],[6,"PyResult"],[15,"str"],[6,"c_char"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[4,"Option"],[15,"bool"],[3,"Py"],[3,"Vec"],[6,"c_int"],[3,"Demand"],[3,"String"],[3,"PyDowncastError"],[3,"TypeId"],[3,"PyTypeObject"],[3,"PyType"],[8,"Element"],[15,"f64"],[8,"AsPrimitive"],[6,"Ix1"],[8,"Dimension"],[6,"ArrayView"],[6,"ArrayViewMut"],[3,"PyArrayObject"],[6,"RawArrayView"],[6,"RawArrayViewMut"],[3,"ArrayBase"],[6,"Array"],[6,"Ix2"],[6,"Ix3"],[8,"NpyIndex"],[3,"PyModule"],[8,"Copy"],[6,"Ix0"],[3,"PyReadonlyArray"],[3,"PyReadwriteArray"],[8,"IntoDimension"],[4,"NPY_ORDER"],[6,"MatrixView"],[6,"MatrixViewMut"],[3,"Dyn"],[6,"DMatrixView"],[6,"DMatrixViewMut"],[8,"Clone"],[8,"Unit"],[3,"Datetime"],[3,"Timedelta"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"i64"],[8,"Hash"],[8,"PartialOrd"],[3,"Years"],[3,"Months"],[3,"Weeks"],[3,"Days"],[3,"Hours"],[3,"Minutes"],[3,"Seconds"],[3,"Milliseconds"],[3,"Microseconds"],[3,"Nanoseconds"],[3,"Picoseconds"],[3,"Femtoseconds"],[3,"Attoseconds"],[3,"PyArrayAPI"],[6,"npy_uint32"],[4,"NPY_CASTING"],[6,"npy_intp"],[3,"NpyIter"],[6,"NpyIter_GetMultiIndexFunc"],[6,"NpyIter_IterNextFunc"],[6,"npy_bool"],[4,"NPY_SELECTKIND"],[4,"NPY_SORTKIND"],[6,"c_void"],[3,"PyArrayMultiIterObject"],[3,"PyArray_Chunk"],[4,"NPY_SCALARKIND"],[4,"NPY_CLIPMODE"],[6,"npy_ucs4"],[3,"npy_stride_sort_item"],[4,"NPY_DATETIMEUNIT"],[3,"npy_datetimestruct"],[6,"npy_datetime"],[6,"c_uchar"],[4,"FILE"],[6,"PyArray_VectorUnaryFunc"],[6,"c_uint"],[3,"PyArray_ArrFuncs"],[3,"PyArray_Dims"],[3,"PyArrayMapIterObject"],[3,"PyArrayIterObject"],[4,"NPY_SEARCHSIDE"],[3,"npy_timedeltastruct"],[6,"npy_timedelta"],[6,"PyDataMem_EventHookFunc"],[4,"NpyTypes"],[3,"PyArray_ArrayDescr"],[3,"PyArrayFlagsObject"],[3,"PyArrayInterface"],[3,"PyUFuncObject"],[3,"PyArrayNeighborhoodIterObject"],[3,"NpyAuxData"],[3,"PyArray_DatetimeMetaData"],[3,"PyArray_DatetimeDTypeMetaData"],[3,"npy_cdouble"],[3,"npy_cfloat"],[3,"npy_clongdouble"],[4,"NPY_TYPES"],[4,"NPY_TYPECHAR"],[4,"NPY_TYPEKINDCHAR"],[4,"NPY_BYTEORDER_CHAR"],[3,"PyUFuncAPI"],[6,"PyUFuncGenericFunction"],[6,"Complex32"],[6,"Complex64"],[8,"IntoPyArray"],[8,"ToPyArray"]],"a":{"nalgebra":[251,252,284,285,286,287,320,321]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
