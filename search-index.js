var searchIndex = JSON.parse('{\
"numpy":{"doc":"This crate provides Rust interfaces for NumPy C APIs, …","t":[13,4,6,6,8,3,18,2,5,6,5,6,5,6,5,6,5,6,5,6,5,6,3,13,2,2,2,2,2,2,2,2,2,2,2,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,11,11,11,11,0,14,11,11,11,11,0,11,11,11,11,11,11,11,11,11,11,0,0,11,5,5,5,14,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,10,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,2,11,2,11,11,0,11,11,11,14,2,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,3,6,6,6,6,6,6,6,3,6,6,6,6,6,6,6,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,16,16,8,16,16,8,8,8,10,10,18,3,3,18,8,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,3,3,3,3,3,3,3,3,3,3,3,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,0,0,0,0,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,4,7,3,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,5,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,11,11,11,11,11,11,11,11,11,13,13,13,13,13,13,13,13,11,11,11,11,11,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,17,3,6,6,3,6,6,3,3,3,3,3,3,3,6,6,6,3,3,3,6,6,6,3,3,3,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,6,6,6,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,6,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,13,13,13,13,13,13,13,4,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,18,13,13,13,13,13,13,13,13,18,4,13,13,13,13,4,13,13,4,4,13,13,13,4,13,13,13,13,13,13,4,4,4,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,6,6,3,3,6,3,6,6,6,6,3,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,6,3,6,3,6,6,6,6,6,6,6,6,6,6,6,11,12,12,12,12,12,12,12,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,7,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["AlreadyBorrowed","BorrowError","Complex32","Complex64","Element","FromVecError","IS_COPY","IntoPyArray","Ix1","Ix1","Ix2","Ix2","Ix3","Ix3","Ix4","Ix4","Ix5","Ix5","Ix6","Ix6","IxDyn","IxDyn","NotContiguousError","NotWriteable","NpyIndex","PY_ARRAY_API","PY_UFUNC_API","PyArray","PyArray0","PyArray1","PyArray2","PyArray3","PyArray4","PyArray5","PyArray6","PyArrayDescr","PyArrayDyn","PyReadonlyArray","PyReadonlyArray1","PyReadonlyArray2","PyReadonlyArray3","PyReadonlyArray4","PyReadonlyArray5","PyReadonlyArray6","PyReadonlyArrayDyn","PyReadwriteArray","PyReadwriteArray1","PyReadwriteArray2","PyReadwriteArray3","PyReadwriteArray4","PyReadwriteArray5","PyReadwriteArray6","PyReadwriteArrayDyn","ToNpyDims","ToPyArray","alignment","arguments","arguments","arguments","array","array","as_dtype_ptr","as_ptr","as_ref","base","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","byteorder","char","convert","datetime","deref","dot","dtype","einsum","einsum","extract","flags","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from_borrowed_ptr_or_opt","from_owned_ptr_or_opt","from_subset","from_subset","from_subset","from_subset","get_array_module","get_dtype","get_dtype","get_dtype","get_field","has_fields","has_object","has_subarray","inner","into","into","into","into","into_dtype_ptr","into_py","is_aligned_struct","is_equiv_to","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_native_byteorder","is_type_of","itemsize","kind","nalgebra","names","ndarray","ndim","new","npyffi","num","object","of","pyarray","pyo3","shape","to_object","to_string","to_string","to_string","to_string","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from_exact","try_from_unchecked","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_object_raw","typeobj","PyArray","PyArray0","PyArray1","PyArray2","PyArray3","PyArray4","PyArray5","PyArray6","PyArrayDyn","arange","as_array","as_array_mut","as_array_ptr","as_ptr","as_raw_array","as_raw_array_mut","as_ref","as_slice","as_slice_mut","borrow","borrow_from_array","borrow_mut","cast","copy_to","data","deref","dims","dtype","extract","fmt","fmt","from","from_array","from_borrowed_ptr","from_borrowed_ptr_or_opt","from_exact_iter","from_iter","from_owned_array","from_owned_object_array","from_owned_ptr","from_owned_ptr_or_opt","from_slice","from_subset","from_vec","from_vec2","from_vec3","get","get_array_module","get_mut","get_owned","into","into_py","into_py","is_c_contiguous","is_contiguous","is_empty","is_fortran_contiguous","is_in_subset","is_type_of","item","len","ndim","new","readonly","readwrite","reshape","reshape_with_order","resize","shape","strides","to_dyn","to_object","to_owned","to_owned_array","to_string","to_subset","to_subset_unchecked","to_vec","try_as_matrix","try_as_matrix_mut","try_from","try_from","try_from_exact","try_from_unchecked","try_into","try_readonly","try_readwrite","type_id","type_object_raw","uget","uget_mut","uget_raw","zeros","PyReadonlyArray","PyReadonlyArray1","PyReadonlyArray2","PyReadonlyArray3","PyReadonlyArray4","PyReadonlyArray5","PyReadonlyArray6","PyReadonlyArrayDyn","PyReadwriteArray","PyReadwriteArray1","PyReadwriteArray2","PyReadwriteArray3","PyReadwriteArray4","PyReadwriteArray5","PyReadwriteArray6","PyReadwriteArrayDyn","as_array","as_array_mut","as_matrix","as_matrix","as_matrix_mut","as_matrix_mut","as_slice","as_slice_mut","borrow","borrow","borrow_mut","borrow_mut","clone","clone_into","deref","deref","drop","drop","extract","extract","fmt","fmt","from","from","from_subset","from_subset","get","get_mut","into","into","is_in_subset","is_in_subset","resize","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_as_matrix","try_as_matrix_mut","try_from","try_from","try_into","try_into","type_id","type_id","Dim","Dim","IntoPyArray","Item","Item","NpyIndex","ToNpyDims","ToPyArray","into_pyarray","to_pyarray","ABBREV","Datetime","Timedelta","UNIT","Unit","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","cmp","eq","eq","fmt","fmt","from","from","from","from","from_subset","from_subset","get_dtype","get_dtype","hash","hash","into","into","is_in_subset","is_in_subset","ne","ne","partial_cmp","partial_cmp","to_owned","to_owned","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","units","Attoseconds","Days","Femtoseconds","Hours","Microseconds","Milliseconds","Minutes","Months","Nanoseconds","Picoseconds","Seconds","Weeks","Years","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","cmp","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","into","into","into","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","array","flags","objects","types","ufunc","NPY_NUMUSERTYPES","NpyIter_AdvancedNew","NpyIter_Copy","NpyIter_CreateCompatibleStrides","NpyIter_Deallocate","NpyIter_DebugPrint","NpyIter_EnableExternalLoop","NpyIter_GetAxisStrideArray","NpyIter_GetBufferSize","NpyIter_GetDataPtrArray","NpyIter_GetDescrArray","NpyIter_GetGetMultiIndex","NpyIter_GetIndexPtr","NpyIter_GetInitialDataPtrArray","NpyIter_GetInnerFixedStrideArray","NpyIter_GetInnerLoopSizePtr","NpyIter_GetInnerStrideArray","NpyIter_GetIterIndex","NpyIter_GetIterIndexRange","NpyIter_GetIterNext","NpyIter_GetIterSize","NpyIter_GetIterView","NpyIter_GetNDim","NpyIter_GetNOp","NpyIter_GetOperandArray","NpyIter_GetReadFlags","NpyIter_GetShape","NpyIter_GetWriteFlags","NpyIter_GotoIndex","NpyIter_GotoIterIndex","NpyIter_GotoMultiIndex","NpyIter_HasDelayedBufAlloc","NpyIter_HasExternalLoop","NpyIter_HasIndex","NpyIter_HasMultiIndex","NpyIter_IsBuffered","NpyIter_IsFirstVisit","NpyIter_IsGrowInner","NpyIter_IterationNeedsAPI","NpyIter_MultiNew","NpyIter_New","NpyIter_RemoveAxis","NpyIter_RemoveMultiIndex","NpyIter_RequiresBuffering","NpyIter_Reset","NpyIter_ResetBasePointers","NpyIter_ResetToIterIndexRange","NpyTypes","PY_ARRAY_API","PyArrayAPI","PyArrayDescr_Type","PyArrayFlags_Type","PyArrayIter_Type","PyArrayMultiIter_Type","PyArray_All","PyArray_Any","PyArray_Arange","PyArray_ArangeObj","PyArray_ArgMax","PyArray_ArgMin","PyArray_ArgPartition","PyArray_ArgSort","PyArray_As1D","PyArray_As2D","PyArray_AsCArray","PyArray_AxisConverter","PyArray_BoolConverter","PyArray_Broadcast","PyArray_BroadcastToShape","PyArray_BufferConverter","PyArray_ByteorderConverter","PyArray_Byteswap","PyArray_CanCastArrayTo","PyArray_CanCastSafely","PyArray_CanCastScalar","PyArray_CanCastTo","PyArray_CanCastTypeTo","PyArray_CanCoerceScalar","PyArray_CastAnyTo","PyArray_CastScalarDirect","PyArray_CastScalarToCtype","PyArray_CastTo","PyArray_CastToType","PyArray_CastingConverter","PyArray_Check","PyArray_CheckAnyScalarExact","PyArray_CheckAxis","PyArray_CheckExact","PyArray_CheckFromAny","PyArray_CheckStrides","PyArray_Choose","PyArray_Clip","PyArray_ClipmodeConverter","PyArray_CompareLists","PyArray_CompareString","PyArray_CompareUCS4","PyArray_Compress","PyArray_Concatenate","PyArray_Conjugate","PyArray_ConvertClipmodeSequence","PyArray_ConvertToCommonType","PyArray_Converter","PyArray_CopyAndTranspose","PyArray_CopyAnyInto","PyArray_CopyInto","PyArray_CopyObject","PyArray_Correlate","PyArray_Correlate2","PyArray_CountNonzero","PyArray_CreateSortedStridePerm","PyArray_CumProd","PyArray_CumSum","PyArray_DatetimeStructToDatetime","PyArray_DatetimeToDatetimeStruct","PyArray_DebugPrint","PyArray_DescrAlignConverter","PyArray_DescrAlignConverter2","PyArray_DescrConverter","PyArray_DescrConverter2","PyArray_DescrFromObject","PyArray_DescrFromScalar","PyArray_DescrFromType","PyArray_DescrFromTypeObject","PyArray_DescrNew","PyArray_DescrNewByteorder","PyArray_DescrNewFromType","PyArray_Diagonal","PyArray_Dump","PyArray_Dumps","PyArray_EinsteinSum","PyArray_ElementFromName","PyArray_ElementStrides","PyArray_Empty","PyArray_EnsureAnyArray","PyArray_EnsureArray","PyArray_EquivTypenums","PyArray_EquivTypes","PyArray_FailUnlessWriteable","PyArray_FieldNames","PyArray_FillObjectArray","PyArray_FillWithScalar","PyArray_Flatten","PyArray_Free","PyArray_FromAny","PyArray_FromArray","PyArray_FromArrayAttr","PyArray_FromBuffer","PyArray_FromDims","PyArray_FromDimsAndDataAndDescr","PyArray_FromFile","PyArray_FromInterface","PyArray_FromIter","PyArray_FromScalar","PyArray_FromString","PyArray_FromStructInterface","PyArray_GetArrayParamsFromObject","PyArray_GetCastFunc","PyArray_GetEndianness","PyArray_GetField","PyArray_GetNDArrayCFeatureVersion","PyArray_GetNDArrayCVersion","PyArray_GetNumericOps","PyArray_GetPriority","PyArray_GetPtr","PyArray_INCREF","PyArray_InitArrFuncs","PyArray_InnerProduct","PyArray_IntTupleFromIntp","PyArray_IntpConverter","PyArray_IntpFromSequence","PyArray_Item_INCREF","PyArray_Item_XDECREF","PyArray_IterAllButAxis","PyArray_IterNew","PyArray_LexSort","PyArray_MapIterArray","PyArray_MapIterArrayCopyIfOverlap","PyArray_MapIterNext","PyArray_MapIterSwapAxes","PyArray_MatrixProduct","PyArray_MatrixProduct2","PyArray_Max","PyArray_Mean","PyArray_Min","PyArray_MinScalarType","PyArray_MoveInto","PyArray_MultiplyIntList","PyArray_MultiplyList","PyArray_NeighborhoodIterNew","PyArray_New","PyArray_NewCopy","PyArray_NewFlagsObject","PyArray_NewFromDescr","PyArray_NewLikeArray","PyArray_Newshape","PyArray_Nonzero","PyArray_ObjectType","PyArray_One","PyArray_OrderConverter","PyArray_OutputConverter","PyArray_OverflowMultiplyList","PyArray_Partition","PyArray_Prod","PyArray_PromoteTypes","PyArray_Ptp","PyArray_PutMask","PyArray_PutTo","PyArray_PyIntAsInt","PyArray_PyIntAsIntp","PyArray_Ravel","PyArray_RegisterCanCast","PyArray_RegisterCastFunc","PyArray_RegisterDataType","PyArray_RemoveAxesInPlace","PyArray_RemoveSmallest","PyArray_Repeat","PyArray_Reshape","PyArray_Resize","PyArray_ResolveWritebackIfCopy","PyArray_ResultType","PyArray_Return","PyArray_Round","PyArray_Scalar","PyArray_ScalarAsCtype","PyArray_ScalarFromObject","PyArray_ScalarKind","PyArray_SearchSorted","PyArray_SearchsideConverter","PyArray_SelectkindConverter","PyArray_SetBaseObject","PyArray_SetDatetimeParseFunction","PyArray_SetField","PyArray_SetNumericOps","PyArray_SetStringFunction","PyArray_SetUpdateIfCopyBase","PyArray_SetWritebackIfCopyBase","PyArray_Size","PyArray_Sort","PyArray_SortkindConverter","PyArray_Squeeze","PyArray_Std","PyArray_Sum","PyArray_SwapAxes","PyArray_TakeFrom","PyArray_TimedeltaStructToTimedelta","PyArray_TimedeltaToTimedeltaStruct","PyArray_ToFile","PyArray_ToList","PyArray_ToString","PyArray_Trace","PyArray_Transpose","PyArray_Type","PyArray_TypeObjectFromType","PyArray_TypestrConvert","PyArray_UpdateFlags","PyArray_ValidType","PyArray_View","PyArray_Where","PyArray_XDECREF","PyArray_Zero","PyArray_Zeros","PyBigArray_Type","PyBoolArrType_Type","PyByteArrType_Type","PyCDoubleArrType_Type","PyCFloatArrType_Type","PyCLongDoubleArrType_Type","PyCharacterArrType_Type","PyComplexFloatingArrType_Type","PyDataMem_FREE","PyDataMem_NEW","PyDataMem_NEW_ZEROED","PyDataMem_RENEW","PyDataMem_SetEventHook","PyDoubleArrType_Type","PyFlexibleArrType_Type","PyFloatArrType_Type","PyFloatingArrType_Type","PyGenericArrType_Type","PyInexactArrType_Type","PyIntArrType_Type","PyIntegerArrType_Type","PyLongArrType_Type","PyLongDoubleArrType_Type","PyLongLongArrType_Type","PyNumberArrType_Type","PyObjectArrType_Type","PyShortArrType_Type","PySignedIntegerArrType_Type","PyStringArrType_Type","PyUByteArrType_Type","PyUIntArrType_Type","PyULongArrType_Type","PyULongLongArrType_Type","PyUShortArrType_Type","PyUnicodeArrType_Type","PyUnsignedIntegerArrType_Type","PyVoidArrType_Type","_PyArrayScalar_BoolValues","_PyArray_GetSigintBuf","_PyArray_SigintHandler","borrow","borrow","borrow_mut","borrow_mut","from","from","from_subset","from_subset","get_type_object","into","into","is_in_subset","is_in_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_into","try_into","type_id","type_id","NPY_ALIGNED_STRUCT","NPY_ARRAY_ALIGNED","NPY_ARRAY_BEHAVED","NPY_ARRAY_BEHAVED_NS","NPY_ARRAY_CARRAY","NPY_ARRAY_CARRAY_RO","NPY_ARRAY_C_CONTIGUOUS","NPY_ARRAY_DEFAULT","NPY_ARRAY_ELEMENTSTRIDES","NPY_ARRAY_ENSUREARRAY","NPY_ARRAY_ENSURECOPY","NPY_ARRAY_FARRAY","NPY_ARRAY_FARRAY_RO","NPY_ARRAY_FORCECAST","NPY_ARRAY_F_CONTIGUOUS","NPY_ARRAY_INOUT_ARRAY","NPY_ARRAY_INOUT_ARRAY2","NPY_ARRAY_INOUT_FARRAY","NPY_ARRAY_INOUT_FARRAY2","NPY_ARRAY_IN_ARRAY","NPY_ARRAY_IN_FARRAY","NPY_ARRAY_NOTSWAPPED","NPY_ARRAY_OUT_ARRAY","NPY_ARRAY_OUT_FARRAY","NPY_ARRAY_OWNDATA","NPY_ARRAY_UPDATEIFCOPY","NPY_ARRAY_UPDATE_ALL","NPY_ARRAY_WRITEABLE","NPY_ARRAY_WRITEBACKIFCOPY","NPY_FROM_FIELDS","NPY_ITEM_HASOBJECT","NPY_ITEM_IS_POINTER","NPY_ITEM_REFCOUNT","NPY_ITER_ALIGNED","NPY_ITER_ALLOCATE","NPY_ITER_ARRAYMASK","NPY_ITER_BUFFERED","NPY_ITER_COMMON_DTYPE","NPY_ITER_CONTIG","NPY_ITER_COPY","NPY_ITER_COPY_IF_OVERLAP","NPY_ITER_C_INDEX","NPY_ITER_DELAY_BUFALLOC","NPY_ITER_DONT_NEGATE_STRIDES","NPY_ITER_EXTERNAL_LOOP","NPY_ITER_F_INDEX","NPY_ITER_GLOBAL_FLAGS","NPY_ITER_GROWINNER","NPY_ITER_MULTI_INDEX","NPY_ITER_NBO","NPY_ITER_NO_BROADCAST","NPY_ITER_NO_SUBTYPE","NPY_ITER_OVERLAP_ASSUME_ELEMENTWISE","NPY_ITER_PER_OP_FLAGS","NPY_ITER_RANGED","NPY_ITER_READONLY","NPY_ITER_READWRITE","NPY_ITER_REDUCE_OK","NPY_ITER_REFS_OK","NPY_ITER_UPDATEIFCOPY","NPY_ITER_VIRTUAL","NPY_ITER_WRITEMASKED","NPY_ITER_WRITEONLY","NPY_ITER_ZEROSIZE_OK","NPY_LIST_PICKLE","NPY_NEEDS_INIT","NPY_NEEDS_PYAPI","NPY_OBJECT_DTYPE_FLAGS","NPY_USE_GETITEM","NPY_USE_SETITEM","NpyAuxData","NpyAuxData_CloneFunc","NpyAuxData_FreeFunc","NpyIter","NpyIter_GetMultiIndexFunc","NpyIter_IterNextFunc","PyArrayFlagsObject","PyArrayInterface","PyArrayIterObject","PyArrayMapIterObject","PyArrayMultiIterObject","PyArrayNeighborhoodIterObject","PyArrayObject","PyArray_ArgFunc","PyArray_ArgPartitionFunc","PyArray_ArgSortFunc","PyArray_ArrFuncs","PyArray_ArrayDescr","PyArray_Chunk","PyArray_CompareFunc","PyArray_CopySwapFunc","PyArray_CopySwapNFunc","PyArray_DatetimeDTypeMetaData","PyArray_DatetimeMetaData","PyArray_Descr","PyArray_Dims","PyArray_DotFunc","PyArray_FastClipFunc","PyArray_FastPutmaskFunc","PyArray_FastTakeFunc","PyArray_FillFunc","PyArray_FillWithScalarFunc","PyArray_FromStrFunc","PyArray_GetItemFunc","PyArray_NonzeroFunc","PyArray_PartitionFunc","PyArray_ScalarKindFunc","PyArray_ScanFunc","PyArray_SetItemFunc","PyArray_SortFunc","PyArray_VectorUnaryFunc","PyDataMem_EventHookFunc","PyUFuncGenericFunction","PyUFuncObject","PyUFunc_LegacyInnerLoopSelectionFunc","PyUFunc_MaskedInnerLoopSelectionFunc","PyUFunc_MaskedStridedInnerLoopFunc","PyUFunc_TypeResolutionFunc","_internal_iter","ait","alignment","ao","ao","argmax","argmin","argsort","arr","array","backstrides","backstrides","base","base","base","base","base","baseoffset","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","bounds","bounds","byteorder","c_metadata","cancastscalarkindto","cancastto","cast","castdict","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compare","consec","constant","contiguous","contiguous","coordinates","coordinates","copyswap","copyswapn","core_dim_ixs","core_enabled","core_num_dim_ix","core_num_dims","core_offsets","core_signature","data","data","data","dataptr","dataptr","dataptr","descr","descr","dimensions","dimensions","dimensions","dimensions","dims_m1","dims_m1","doc","dotfunc","elsize","extra_op","extra_op_dtype","extra_op_flags","extra_op_iter","extra_op_next","extra_op_ptrs","f","factors","factors","fancy_dims","fancy_strides","fastclip","fastputmask","fasttake","fields","fill","fillwithscalar","flags","flags","flags","flags","flags","fmt","free","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","fromstr","functions","getitem","hash","identity","index","index","index","index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","itemsize","iter_count","iter_flags","iteraxes","iters","kind","legacy_inner_loop_selector","len","len","limits","limits","limits_sizes","limits_sizes","masked_inner_loop_selector","meta","metadata","mode","name","names","nargs","nd","nd","nd","nd","nd","nd_fancy","nd_m1","nd_m1","needs_api","nin","nonzero","nout","npy_iter_get_dataptr_t","ntypes","num","numiter","numiter","ob_base","ob_base","ob_base","ob_base","ob_base","ob_base","ob_base","ob_base","ob_base","obj","op_flags","outer","outer_next","outer_ptrs","outer_strides","ptr","ptr","ptr","reserved","reserved1","reserved2","scalarkind","scanfunc","setitem","shape","shape","size","size","size","size","sort","strides","strides","strides","strides","subarray","subspace","subspace_iter","subspace_next","subspace_ptrs","subspace_strides","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","translate","translate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","two","type_","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_num","type_resolver","typekind","typeobj","types","unused","userloops","weakreflist","NPY_ANYORDER","NPY_BIG","NPY_BOOL","NPY_BOOLLTR","NPY_BOOL_SCALAR","NPY_BYTE","NPY_BYTELTR","NPY_BYTEORDER_CHAR","NPY_CASTING","NPY_CDOUBLE","NPY_CDOUBLELTR","NPY_CFLOAT","NPY_CFLOATLTR","NPY_CHAR","NPY_CHARLTR","NPY_CLIP","NPY_CLIPMODE","NPY_CLONGDOUBLE","NPY_CLONGDOUBLELTR","NPY_COMPLEXLTR","NPY_COMPLEX_SCALAR","NPY_CORDER","NPY_DATETIME","NPY_DATETIMELTR","NPY_DATETIMEUNIT","NPY_DOUBLE","NPY_DOUBLELTR","NPY_EQUIV_CASTING","NPY_FLOAT","NPY_FLOATINGLTR","NPY_FLOATLTR","NPY_FLOAT_SCALAR","NPY_FORTRANORDER","NPY_FR_D","NPY_FR_GENERIC","NPY_FR_M","NPY_FR_W","NPY_FR_Y","NPY_FR_as","NPY_FR_fs","NPY_FR_h","NPY_FR_m","NPY_FR_ms","NPY_FR_ns","NPY_FR_ps","NPY_FR_s","NPY_FR_us","NPY_GENBOOLLTR","NPY_HALF","NPY_HALFLTR","NPY_HEAPSORT","NPY_IGNORE","NPY_INT","NPY_INTLTR","NPY_INTNEG_SCALAR","NPY_INTPLTR","NPY_INTPOS_SCALAR","NPY_INTROSELECT","NPY_KEEPORDER","NPY_LITTLE","NPY_LONG","NPY_LONGDOUBLE","NPY_LONGDOUBLELTR","NPY_LONGLONG","NPY_LONGLONGLTR","NPY_LONGLTR","NPY_MERGESORT","NPY_NATBYTE","NPY_NATIVE","NPY_NOSCALAR","NPY_NOTYPE","NPY_NO_CASTING","NPY_NTYPES","NPY_OBJECT","NPY_OBJECTLTR","NPY_OBJECT_SCALAR","NPY_OPPBYTE","NPY_ORDER","NPY_QUICKSORT","NPY_RAISE","NPY_SAFE_CASTING","NPY_SAME_KIND_CASTING","NPY_SCALARKIND","NPY_SEARCHLEFT","NPY_SEARCHRIGHT","NPY_SEARCHSIDE","NPY_SELECTKIND","NPY_SHORT","NPY_SHORTLTR","NPY_SIGNEDLTR","NPY_SORTKIND","NPY_STRING","NPY_STRINGLTR","NPY_STRINGLTR2","NPY_SWAP","NPY_TIMEDELTA","NPY_TIMEDELTALTR","NPY_TYPECHAR","NPY_TYPEKINDCHAR","NPY_TYPES","NPY_UBYTE","NPY_UBYTELTR","NPY_UINT","NPY_UINTLTR","NPY_UINTPLTR","NPY_ULONG","NPY_ULONGLONG","NPY_ULONGLONGLTR","NPY_ULONGLTR","NPY_UNICODE","NPY_UNICODELTR","NPY_UNSAFE_CASTING","NPY_UNSIGNEDLTR","NPY_USERDEF","NPY_USHORT","NPY_USHORTLTR","NPY_VOID","NPY_VOIDLTR","NPY_WRAP","as_","as_","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","cmp","day","day","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","from_subset","hash","hash","hash","hash","hash","hash","hash","hash","hash","hash","hour","imag","imag","imag","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","is_in_subset","min","month","npy_bool","npy_byte","npy_cdouble","npy_cfloat","npy_char","npy_clongdouble","npy_complex128","npy_complex256","npy_complex64","npy_datetime","npy_datetimestruct","npy_double","npy_float","npy_float128","npy_float16","npy_float32","npy_float64","npy_half","npy_hash_t","npy_int","npy_int16","npy_int32","npy_int64","npy_int8","npy_intp","npy_long","npy_longdouble","npy_longlong","npy_short","npy_stride_sort_item","npy_timedelta","npy_timedeltastruct","npy_ubyte","npy_ucs4","npy_uint","npy_uint16","npy_uint32","npy_uint64","npy_uint8","npy_uintp","npy_ulong","npy_ulonglong","npy_ushort","partial_cmp","perm","ps","ps","real","real","real","sec","sec","stride","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","to_subset_unchecked","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","us","us","year","PY_UFUNC_API","PyUFuncAPI","PyUFunc_DD_D","PyUFunc_D_D","PyUFunc_DefaultTypeResolver","PyUFunc_FF_F","PyUFunc_FF_F_As_DD_D","PyUFunc_F_F","PyUFunc_F_F_As_D_D","PyUFunc_FromFuncAndData","PyUFunc_FromFuncAndDataAndSignature","PyUFunc_FromFuncAndDataAndSignatureAndIdentity","PyUFunc_GG_G","PyUFunc_G_G","PyUFunc_GenericFunction","PyUFunc_GetPyValues","PyUFunc_OO_O","PyUFunc_OO_O_method","PyUFunc_O_O","PyUFunc_O_O_method","PyUFunc_On_Om","PyUFunc_RegisterLoopForDescr","PyUFunc_RegisterLoopForType","PyUFunc_ReplaceLoopBySignature","PyUFunc_SetUsesArraysAsData","PyUFunc_ValidateCasting","PyUFunc_checkfperr","PyUFunc_clearfperr","PyUFunc_d_d","PyUFunc_dd_d","PyUFunc_e_e","PyUFunc_e_e_As_d_d","PyUFunc_e_e_As_f_f","PyUFunc_ee_e","PyUFunc_ee_e_As_dd_d","PyUFunc_ee_e_As_ff_f","PyUFunc_f_f","PyUFunc_f_f_As_d_d","PyUFunc_ff_f","PyUFunc_ff_f_As_dd_d","PyUFunc_g_g","PyUFunc_getfperr","PyUFunc_gg_g","PyUFunc_handlefperr","borrow","borrow_mut","from","from_subset","into","is_in_subset","to_subset","to_subset_unchecked","try_from","try_into","type_id"],"q":["numpy","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::borrow","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::convert","","","","","","","","","","numpy::datetime","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::datetime::units","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::npyffi","","","","","numpy::npyffi::array","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::npyffi::flags","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","numpy::npyffi::objectsnumpy::npyffi::typesnumpy::npyffi::ufunc","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["The given array is already borrowed","Inidcates why borrowing an array failed.","","","Represents that a type can be an element of <code>PyArray</code>.","Represents that given <code>Vec</code> cannot be treated as an array.","Flag that indicates whether this type is trivially …","","Create a one-dimensional index","one-dimensional","Create a two-dimensional index","two-dimensional","Create a three-dimensional index","three-dimensional","Create a four-dimensional index","four-dimensional","Create a five-dimensional index","five-dimensional","Create a six-dimensional index","six-dimensional","Create a dynamic-dimensional index","dynamic-dimensional","Represents that the given array is not contiguous.","The given array is not writeable","","","","","","","","","","","","Binding of <code>numpy.dtype</code>.","","","","","","","","","","","","","","","","","","","","Returns the required alignment (bytes) of this type …","","","","Safe interface for NumPy’s N-dimensional arrays","Create an <strong><code>Array</code></strong> with one, two or three dimensions.","Returns <code>self</code> as <code>*mut PyArray_Descr</code>.","Gets the underlying FFI pointer, returns a borrowed …","","Returns the type descriptor for the base element of …","Types to safely create references into NumPy arrays","","","","","","","","","Returns an ASCII character indicating the byte-order of …","Returns a unique ASCII character for each of the 21 …","Defines conversion traits between Rust types and NumPy …","Support datetimes and timedeltas","","Return the dot product of two arrays.","Returns the type descriptor (“dtype”) for a registered …","Return the Einstein summation convention of given tensors.","Return the Einstein summation convention of given tensors.","","Returns bit-flags describing how this type descriptor is …","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","Returns the associated type descriptor (“dtype”) for …","","","Returns the type descriptor and offset of the field with …","Returns true if the type descriptor is a structured type.","Returns true if the type descriptor contains any …","Returns true if the type descriptor is a sub-array.","Return the inner product of two arrays.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns <code>self</code> as <code>*mut PyArray_Descr</code> while increasing the …","","Returns true if the type descriptor is a struct which …","Returns true if two type descriptors are equivalent.","","","","","Returns true if type descriptor byteorder is native, or …","","Returns the element size of this type descriptor.","Returns an ASCII character (one of <code>biufcmMOSUV</code>) …","","Returns an ordered list of field names, or <code>None</code> if there …","","Returns the number of dimensions if this type descriptor …","Creates a new type descriptor (“dtype”) object from an …","Low-Level bindings for NumPy C API.","Returns a unique number for each of the 21 different …","Shortcut for creating a type descriptor of <code>object</code> type.","Returns the type descriptor for a registered type.","Create a <code>PyArray</code> with one, two or three dimensions.","","Returns the shape of the sub-array.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the array scalar corresponding to this type …","A safe, statically-typed wrapper for NumPy’s <code>ndarray</code> …","Zero-dimensional array.","One-dimensional array.","Two-dimensional array.","Three-dimensional array.","Four-dimensional array.","Five-dimensional array.","Six-dimensional array.","Dynamic-dimensional array.","Return evenly spaced values within a given interval.","Returns an <code>ArrayView</code> of the internal array.","Returns an <code>ArrayViewMut</code> of the internal array.","Returns a raw pointer to the underlying <code>PyArrayObject</code>.","Gets the underlying FFI pointer, returns a borrowed …","Returns the internal array as <code>RawArrayView</code> enabling …","Returns the internal array as <code>RawArrayViewMut</code> enabling …","","Returns an immutable view of the internal data as a slice.","Returns a mutable view of the internal data as a slice.","","Creates a NumPy array backed by <code>array</code> and ties its …","","Cast the <code>PyArray&lt;T&gt;</code> to <code>PyArray&lt;U&gt;</code>, by allocating a new …","Copies <code>self</code> into <code>other</code>, performing a data type conversion …","Returns a pointer to the first element of the array.","","Same as <code>shape</code>, but returns <code>D</code> insead of <code>&amp;[usize]</code>.","Returns the <code>dtype</code> of the array.","","","","Returns the argument unchanged.","Construct a NumPy array from a <code>ndarray::ArrayBase</code>.","Constructs a reference to a <code>PyArray</code> from a raw point to a …","","Construct a one-dimensional array from an <code>ExactSizeIterator</code>…","Construct a one-dimensional array from an <code>Iterator</code>.","Constructs a NumPy from an <code>ndarray::Array</code>","Construct a NumPy array containing objects stored in a …","Constructs a reference to a <code>PyArray</code> from a raw pointer to …","","Construct a one-dimensional array from a slice.","","Construct a one-dimensional array from a <code>Vec&lt;T&gt;</code>.","Construct a two-dimension array from a <code>Vec&lt;Vec&lt;T&gt;&gt;</code>.","Construct a three-dimensional array from a <code>Vec&lt;Vec&lt;Vec&lt;T&gt;&gt;&gt;</code>…","Get a reference of the specified element if the given …","Returns a handle to NumPy’s multiarray module.","Same as <code>get</code>, but returns <code>Option&lt;&amp;mut T&gt;</code>.","Get a copy of the specified element in the array.","Calls <code>U::from(self)</code>.","","","Returns <code>true</code> if the internal data of the array is …","Returns <code>true</code> if the internal data of the array is …","Returns <code>true</code> if the there are no elements in the array.","Returns <code>true</code> if the internal data of the array is …","","","Get the single element of a zero-dimensional array.","Calculates the total number of elements in the array.","Returns the number of dimensions of the array.","Creates a new uninitialized NumPy array.","Get an immutable borrow of the NumPy array","Get a mutable borrow of the NumPy array","Special case of <code>reshape_with_order</code> which keeps the memory …","Construct a new array which has same values as self, but …","Extends or truncates the dimensions of an array.","Returns a slice which contains dimmensions of the array.","Returns a slice indicating how many bytes to advance when …","Turn an array with fixed dimensionality into one with …","","Turn <code>&amp;PyArray&lt;T,D&gt;</code> into <code>Py&lt;PyArray&lt;T,D&gt;&gt;</code>, i.e. a pointer …","Get a copy of the array as an <code>ndarray::Array</code>.","","","","Returns a copy of the internal data of the array as a <code>Vec</code>.","Try to convert this array into a <code>nalgebra::MatrixSlice</code> …","Try to convert this array into a <code>nalgebra::MatrixSliceMut</code> …","","","","","","Get an immutable borrow of the NumPy array","Get a mutable borrow of the NumPy array","","","Get an immutable reference of the specified element, …","Same as <code>uget</code>, but returns <code>&amp;mut T</code>.","Same as <code>uget</code>, but returns <code>*mut T</code>.","Construct a new NumPy array filled with zeros.","Read-only borrow of an array.","Read-only borrow of a one-dimensional array.","Read-only borrow of a two-dimensional array.","Read-only borrow of a three-dimensional array.","Read-only borrow of a four-dimensional array.","Read-only borrow of a five-dimensional array.","Read-only borrow of a six-dimensional array.","Read-only borrow of an array whose dimensionality is …","Read-write borrow of an array.","Read-write borrow of a one-dimensional array.","Read-write borrow of a two-dimensional array.","Read-write borrow of a three-dimensional array.","Read-write borrow of a four-dimensional array.","Read-write borrow of a five-dimensional array.","Read-write borrow of a six-dimensional array.","Read-write borrow of an array whose dimensionality is …","Provides an immutable array view of the interior of the …","Provides a mutable array view of the interior of the NumPy …","Convert this two-dimensional array into a …","Convert this one-dimensional array into a …","Convert this one-dimensional array into a …","Convert this two-dimensional array into a …","Provide an immutable slice view of the interior of the …","Provide a mutable slice view of the interior of the NumPy …","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Provide an immutable reference to an element of the NumPy …","Provide a mutable reference to an element of the NumPy …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","Extends or truncates the dimensions of an array.","","","","","","Try to convert this array into a <code>nalgebra::MatrixSlice</code> …","Try to convert this array into a <code>nalgebra::MatrixSliceMut</code> …","","","","","","","The dimension type of the resulting array.","The dimension type of the resulting array.","Conversion trait from owning Rust types into <code>PyArray</code>.","The element type of resulting array.","The element type of resulting array.","Trait implemented by types that can be used to index an …","Utility trait to specify the dimensions of an array.","Conversion trait from borrowing Rust types to <code>PyArray</code>.","Consumes <code>self</code> and moves its data into a NumPy array.","Copies the content pointed to by <code>&amp;self</code> into a newly …","The abbrevation used for debug formatting","Corresponds to the <code>datetime64</code> scalar type","Corresponds to the [<code>timedelta64</code>][scalars-datetime64] …","The matching NumPy datetime unit code","Represents the datetime units supported by NumPy","","","","","","","","","","","","","","","Returns the argument unchanged.","","Returns the argument unchanged.","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","Predefined implementors of the <code>Unit</code> trait","Attoseconds, i.e. 10^-18 seconds","Days, i.e. 24 hours","Femtoseconds, i.e. 10^-15 seconds","Hours, i.e. 60 minutes","Microseconds, i.e. 10^-6 seconds","Milliseconds, i.e. 10^-3 seconds","Minutes, i.e. 60 seconds","Months, i.e. 30 days","Nanoseconds, i.e. 10^-9 seconds","Picoseconds, i.e. 10^-12 seconds","Seconds","Weeks, i.e. 7 days","Years, i.e. 12 months","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Low-Level binding for Array API","","Low-Lebel binding for NumPy C API C-objects","","Low-Level binding for UFunc API","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","All type objects exported by the NumPy API.","A global variable which stores a ‘capsule’ pointer to …","See PY_ARRAY_API for more.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Checks that <code>op</code> is an instance of <code>PyArray</code> or not.","","","Checks that <code>op</code> is an exact instance of <code>PyArray</code> or not.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","","","Get a pointer of the type object assocaited with <code>ty</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeeturns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</codeglobal variable which stores a ‘capsule’ pointer to …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","","Calls <code>U::from(self)</code>.","","","","","",""],"i":[9,0,0,0,0,0,32,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,5,8,9,0,0,4,4,4,4,0,4,5,8,9,4,5,8,9,4,4,0,0,4,0,0,0,0,4,4,4,4,5,5,8,8,9,9,4,5,8,9,4,4,4,5,8,9,0,32,132,133,4,4,4,4,0,4,5,8,9,4,4,4,4,4,5,8,9,4,4,4,4,0,4,0,4,4,0,4,4,4,0,0,4,4,4,5,8,9,4,5,8,9,4,5,8,9,4,4,5,8,9,4,4,4,5,8,9,4,5,8,9,4,4,0,0,0,0,0,0,0,0,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,14,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,51,50,50,51,51,50,51,50,51,50,51,50,50,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,51,50,51,51,50,50,51,50,51,50,51,50,51,50,51,50,51,134,135,0,134,135,0,0,0,134,135,60,0,0,60,0,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,61,62,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,61,62,0,0,0,0,0,0,0,0,0,0,0,0,0,0,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,69,70,71,72,73,74,75,76,77,78,79,80,81,0,0,0,0,0,114,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,0,0,114,114,114,114,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,0,82,82,0,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,82,114,82,82,82,82,82,82,82,82,82,114,114,114,114,114,114,114,114,82,82,82,82,82,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,114,82,82,82,114,82,114,82,114,82,114,82,82,114,82,114,82,114,82,114,82,114,82,114,82,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,119,108,10,109,119,106,106,106,116,108,109,119,39,115,94,121,122,108,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,109,119,10,10,106,106,106,106,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,120,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,106,108,119,109,119,109,119,106,106,118,118,118,118,118,118,39,117,118,109,119,108,39,117,39,93,119,108,109,119,118,106,10,108,108,108,108,108,108,10,109,119,108,108,106,106,106,10,106,106,39,10,116,94,117,86,120,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,106,118,106,10,118,109,93,119,108,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,117,108,118,108,93,10,118,107,94,109,119,109,119,118,122,10,119,118,10,118,39,117,93,119,108,108,109,119,108,118,106,118,0,118,121,93,108,39,10,116,94,118,109,93,119,108,118,118,108,108,108,108,107,94,118,120,118,118,106,106,106,115,117,109,93,119,108,106,39,117,109,119,10,108,108,108,108,108,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,109,119,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,117,10,39,10,115,106,116,107,94,117,118,86,109,93,119,108,120,121,122,10,118,117,10,118,108,118,39,53,129,126,127,95,126,127,0,0,126,127,126,127,126,127,96,0,126,127,128,95,53,126,127,0,126,127,84,126,128,127,95,53,99,99,99,99,99,99,99,99,99,99,99,99,99,99,128,126,127,91,129,126,127,95,127,95,90,53,129,126,126,127,126,127,127,91,129,129,95,126,84,126,126,127,95,129,0,91,96,84,84,0,110,110,0,0,126,127,128,0,126,127,127,129,126,127,0,0,0,126,127,126,127,127,126,126,127,127,126,127,84,128,126,126,127,126,127,96,100,111,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,126,100,111,53,95,91,110,99,126,90,84,96,129,123,124,125,53,95,91,110,99,126,90,84,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,53,95,91,110,99,126,90,84,96,129,100,123,124,125,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,100,100,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,126,98,100,111,123,124,125,100,111,98,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,123,124,125,53,95,91,110,99,126,90,84,96,100,111,98,127,128,129,100,111,100,0,0,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130,130],"f":[0,0,0,0,0,0,0,0,[1,2],0,[[1,1],2],0,[[1,1,1],2],0,[[1,1,1,1],2],0,[[1,1,1,1,1],2],0,[[1,1,1,1,1,1],2],0,[[],[[2,[3]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[4,1],[[5,6],7],[[8,6],7],[[9,6],7],0,0,[4,10],[4,11],[4,12],[4,4],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[4,13],[4,13],0,0,[4,12],[[14,14],15],[6,4],[16,15],0,[12,[[15,[4]]]],[4,17],[[4,18],[[20,[19]]]],[[4,18],[[20,[19]]]],[[5,18],21],[[5,18],21],[[8,18],21],[[8,18],21],[[9,18],21],[[9,18],21],[[]],[[]],[[]],[[]],[[6,11],22],[[6,11],22],[[]],[[]],[[]],[[]],0,[6,4],[6,4],[6,4],[[4,16],15],[4,23],[4,23],[4,23],[[14,14],15],[[]],[[]],[[]],[[]],[4,10],[[4,6],[[24,[4]]]],[4,23],[[4,4],23],[[],23],[[],23],[[],23],[[],23],[4,[[22,[23]]]],[12,23],[4,1],[4,13],0,[4,[[22,[[25,[16]]]]]],0,[4,1],[6,[[15,[4]]]],0,[4,26],[6,4],[6,4],0,0,[4,[[25,[1]]]],[[4,6],7],[[],27],[[],27],[[],27],[[],27],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[],20],[[],[[20,[28]]]],[[],20],[[],20],[[],20],[[],[[20,[28]]]],[[]],[[],20],[[],20],[[],20],[[],20],[[],29],[[],29],[[],29],[[],29],[6,30],[4,31],0,0,0,0,0,0,0,0,0,[[6,[0,[32,[34,[33]]]],[0,[32,[34,[33]]]],[0,[32,[34,[33]]]]],[[14,[[0,[32,[34,[33]]]],35]]]],[[[14,[32,36]]],[[37,[32,36]]]],[[[14,[32,36]]],[[38,[32,36]]]],[14,39],[14,11],[[[14,[32,36]]],[[40,[32,36]]]],[[[14,[32,36]]],[[41,[32,36]]]],[14,12],[[[14,[32,36]]],[[20,[8]]]],[[[14,[32,36]]],[[20,[8]]]],[[]],[[42,12],[[14,[32,36]]]],[[]],[[[14,[32]],23],[[15,[14]]]],[[[14,[32]],14],15],[14],[14,12],[[[14,[32,36]]],36],[14,4],[12,[[15,[14]]]],[[14,18],[[20,[19]]]],[[14,18],[[20,[19]]]],[[]],[[6,42],[[14,[32,36]]]],[[6,11],14],[[6,11],22],[6,[[14,[32,35]]]],[6,[[14,[32,35]]]],[[6,[43,[32,36]]],[[14,[32,36]]]],[[6,[43,[24,36]]],[[14,[7,36]]]],[[6,11],14],[[6,11],22],[6,[[14,[32,35]]]],[[]],[[6,[25,[32]]],[[14,[32,35]]]],[6,[[20,[[14,[32,44]],5]]]],[6,[[20,[[14,[32,45]],5]]]],[[[14,[32,36]],46],22],[6,[[15,[47]]]],[[[14,[32,36]],46],22],[[[14,[32,36]]],[[22,[32]]]],[[]],[[14,6],7],[[14,6],[[24,[14]]]],[14,23],[14,23],[14,23],[14,23],[[],23],[12,23],[[[14,[[0,[48,32]],49]]],[[0,[48,32]]]],[14,1],[14,1],[[6,23],[[14,[32,36]]]],[[[14,[32,36]]],[[50,[32,36]]]],[[[14,[32,36]]],[[51,[32,36]]]],[[[14,[32]],52],[[15,[14]]]],[[[14,[32]],52,53],[[15,[14]]]],[[[14,[32]],52],15],[14],[14],[[[14,[32,36]]],14],[[14,6],7],[14,[[24,[14]]]],[[[14,[32,36]]],[[43,[32,36]]]],[[],27],[[],22],[[]],[[[14,[32,36]]],[[20,[[25,[32]],8]]]],[14,[[22,[54]]]],[14,[[22,[55]]]],[[],20],[[],[[20,[28]]]],[[],[[20,[28]]]],[[]],[[],20],[[[14,[32,36]]],[[20,[[50,[32,36]],9]]]],[[[14,[32,36]]],[[20,[[51,[32,36]],9]]]],[[],29],[6,30],[[[14,[32,36]]]],[[[14,[32,36]]]],[[[14,[32,36]]]],[[6,23],[[14,[32,36]]]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[50,37],[51,38],[[[50,[44]]],[[57,[56,56]]]],[[[50,[35]]],[[57,[56,56]]]],[[[51,[35]]],[[58,[56,56]]]],[[[51,[44]]],[[58,[56,56]]]],[50,[[20,[8]]]],[51,[[20,[8]]]],[[]],[[]],[[]],[[]],[50,50],[[]],[50],[51],[50],[51],[12,[[15,[[50,[32,36]]]]]],[12,[[15,[[51,[32,36]]]]]],[[50,18],21],[[51,18],21],[[]],[[]],[[]],[[]],[50,22],[51,22],[[]],[[]],[[],23],[[],23],[[[51,[35]],52],[[15,[[51,[35]]]]]],[[]],[[],22],[[],22],[[]],[[]],[50,[[22,[54]]]],[51,[[22,[55]]]],[[],20],[[],20],[[],20],[[],20],[[],29],[[],29],0,0,0,0,0,0,0,0,[6,14],[6,14],0,0,0,0,0,[[]],[[]],[[]],[[]],[[[61,[[0,[59,60]]]]],[[61,[[0,[59,60]]]]]],[[[62,[[0,[59,60]]]]],[[62,[[0,[59,60]]]]]],[[]],[[]],[[[61,[[0,[63,60]]]],61],64],[[[62,[[0,[63,60]]]],62],64],[[[61,[[0,[65,60]]]],61],23],[[[62,[[0,[65,60]]]],62],23],[[[61,[60]],18],21],[[[62,[60]],18],21],[[]],[66,[[61,[60]]]],[[]],[66,[[62,[60]]]],[[]],[[]],[6,4],[6,4],[[[61,[[0,[67,60]]]]]],[[[62,[[0,[67,60]]]]]],[[]],[[]],[[],23],[[],23],[[[61,[[0,[65,60]]]],61],23],[[[62,[[0,[65,60]]]],62],23],[[[61,[[0,[68,60]]]],61],[[22,[64]]]],[[[62,[[0,[68,60]]]],62],[[22,[64]]]],[[]],[[]],[[],22],[[],22],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],29],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69,69],[70,70],[71,71],[72,72],[73,73],[74,74],[75,75],[76,76],[77,77],[78,78],[79,79],[80,80],[81,81],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[69,69],64],[[70,70],64],[[71,71],64],[[72,72],64],[[73,73],64],[[74,74],64],[[75,75],64],[[76,76],64],[[77,77],64],[[78,78],64],[[79,79],64],[[80,80],64],[[81,81],64],[[69,69],23],[[70,70],23],[[71,71],23],[[72,72],23],[[73,73],23],[[74,74],23],[[75,75],23],[[76,76],23],[[77,77],23],[[78,78],23],[[79,79],23],[[80,80],23],[[81,81],23],[[69,18],21],[[70,18],21],[[71,18],21],[[72,18],21],[[73,18],21],[[74,18],21],[[75,18],21],[[76,18],21],[[77,18],21],[[78,18],21],[[79,18],21],[[80,18],21],[[81,18],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[69],[70],[71],[72],[73],[74],[75],[76],[77],[78],[79],[80],[81],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[69,69],[[22,[64]]]],[[70,70],[[22,[64]]]],[[71,71],[[22,[64]]]],[[72,72],[[22,[64]]]],[[73,73],[[22,[64]]]],[[74,74],[[22,[64]]]],[[75,75],[[22,[64]]]],[[76,76],[[22,[64]]]],[[77,77],[[22,[64]]]],[[78,78],[[22,[64]]]],[[79,79],[[22,[64]]]],[[80,80],[[22,[64]]]],[[81,81],[[22,[64]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,0,0,0,0,[[82,6,26,39,83,53,84,83,10,26,26,85,85],86],[[82,6,86],86],[[82,6,86,85,85],26],[[82,6,86],26],[[82,6,86]],[[82,6,86],26],[[82,6,86,26],85],[[82,6,86],85],[[82,6,86],17],[[82,6,86],10],[[82,6,86,17],87],[[82,6,86],85],[[82,6,86],17],[[82,6,86,85]],[[82,6,86],85],[[82,6,86],85],[[82,6,86],85],[[82,6,86,85,85]],[[82,6,86,17],88],[[82,6,86],85],[[82,6,86,85],39],[[82,6,86],26],[[82,6,86],26],[[82,6,86],39],[[82,6,86,17]],[[82,6,86,85],26],[[82,6,86,17]],[[82,6,86,85],26],[[82,6,86,85],26],[[82,6,86,85],26],[[82,6,86],89],[[82,6,86],89],[[82,6,86],89],[[82,6,86],89],[[82,6,86],89],[[82,6,86,26],89],[[82,6,86],89],[[82,6,86],89],[[82,6,26,39,83,53,84,83,10],86],[[82,6,39,83,53,84,10],86],[[82,6,86,26],26],[[82,6,86],26],[[82,6,86],89],[[82,6,86,17],26],[[82,6,86,17,17],26],[[82,6,86,85,85,17],26],0,0,0,0,0,0,0,[[82,6,39,26,39],11],[[82,6,39,26,39],11],[[82,6,33,33,33,26],11],[[82,6,11,11,11,10],11],[[82,6,39,26,39],11],[[82,6,39,26,39],11],[[82,6,39,39,26,90],11],[[82,6,39,26,91],11],[[82,6,11,17,26,26],26],[[82,6,11,17,26,26,26],26],[[82,6,11,92,85,26,10],26],[[82,6,11,26],26],[[82,6,11,89],26],[[82,6,93],26],[[82,6,11,85,26],11],[[82,6,11,94],26],[[82,6,11,17],26],[[82,6,39,89],11],[[82,6,39,10,84],89],[[82,6,26,26],26],[[82,6,30,30],89],[[82,6,10,10],89],[[82,6,10,10,84],89],[[82,6,26,26,95],26],[[82,6,39,39],26],[[82,6,11,10,92,26],26],[[82,6,11,92,10],26],[[82,6,39,39],26],[[82,6,39,10,26],11],[[82,6,11,84],26],[[6,11],26],[[82,6,11],26],[[82,6,39,26,26],11],[[6,11],26],[[82,6,11,10,26,26,26,11],11],[[82,6,26,26,85,85,85,85],89],[[82,6,39,11,39,96],11],[[82,6,39,11,11,39],11],[[82,6,11,96],26],[[82,6,85,85,26],26],[[82,6,17,17,1],26],[[82,6,97,97,1],26],[[82,6,39,11,26,39],11],[[82,6,11,26],11],[[82,6,39,39],11],[[82,6,11,96,26],26],[[82,6,11,26],39],[[82,6,11,11],26],[[82,6,11],11],[[82,6,39,39],26],[[82,6,39,39],26],[[82,6,39,11],26],[[82,6,11,11,26],11],[[82,6,11,11,26],11],[[82,6,39],85],[[82,6,26,85,98]],[[82,6,39,26,26,39],11],[[82,6,39,26,26,39],11],[[82,6,99,100],101],[[82,6,101,99,100]],[[82,6,39]],[[82,6,11,10],26],[[82,6,11,10],26],[[82,6,11,10],26],[[82,6,11,10],26],[[82,6,11,10],10],[[82,6,11],10],[[82,6,26],10],[[82,6,11],10],[[82,6,10],10],[[82,6,10,17],10],[[82,6,26],10],[[82,6,39,26,26,26],11],[[82,6,11,11,26],26],[[82,6,11,26],11],[[82,6,17,85,39,10,53,84,39],11],[[82,6,17],26],[[82,6,11],26],[[82,6,26,85,10,26],11],[[82,6,11],11],[[82,6,11],11],[[82,6,26,26],102],[[82,6,10,10],102],[[82,6,39,17],26],[[82,6,11],11],[[82,6,39,11]],[[82,6,39,11],26],[[82,6,39,53],11],[[82,6,11,92],26],[[82,6,11,10,26,26,26,11],11],[[82,6,39,10,26],11],[[82,6,11,10,11],11],[[82,6,11,10,85,85],11],[[82,6,26,26,26],11],[[82,6,26,26,10,17],11],[[82,6,103,10,85,17],11],[[82,6,11],11],[[82,6,11,10,85],11],[[82,6,11,10],11],[[82,6,17,85,10,85,17],11],[[82,6,11],11],[[82,6,11,10,89,10,26,85,39,11],26],[[82,6,10,26],104],[[82,6],26],[[82,6,39,10,26],11],[[82,6],105],[[82,6],105],[[82,6],11],[[82,6,11,33],33],[[82,6,39,85],92],[[82,6,39],26],[[82,6,106]],[[82,6,11,11],11],[[82,6,26,85],11],[[82,6,11,107],26],[[82,6,11,85,26],26],[[82,6,17,10]],[[82,6,17,10]],[[82,6,11,26],11],[[82,6,11],11],[[82,6,11,26],11],[[82,6,39,11],11],[[82,6,39,11,26,39],11],[[82,6,108]],[[82,6,108,39,26]],[[82,6,11,11],11],[[82,6,11,11,39],11],[[82,6,39,26,39],11],[[82,6,39,26,26,39],11],[[82,6,39,26,39],11],[[82,6,39],10],[[82,6,39,39],26],[[82,6,26,26],26],[[82,6,85,26],85],[[82,6,109,85,26,39],11],[[82,6,30,26,85,26,85,92,26,26,11],11],[[82,6,39,53],11],[[82,6,11],11],[[82,6,30,10,26,85,85,92,26,11],11],[[82,6,39,53,10,26],11],[[82,6,39,107,53],11],[[82,6,39],11],[[82,6,11,26],26],[[82,6,39],17],[[82,6,11,53],26],[[82,6,11,39],26],[[82,6,85,26],85],[[82,6,39,39,26,90],26],[[82,6,39,26,26,39],11],[[82,6,10,10],10],[[82,6,39,26,39],11],[[82,6,39,11,11],11],[[82,6,39,11,11,96],11],[[82,6,11],26],[[82,6,11],85],[[82,6,39,53],11],[[82,6,10,26,95],26],[[82,6,10,26,104],26],[[82,6,10],26],[[82,6,39,89]],[[82,6,93],26],[[82,6,39,11,26],11],[[82,6,39,11],11],[[82,6,39,107,26,53],11],[[82,6,39],26],[[82,6,85,39,85,10],10],[[82,6,39],11],[[82,6,39,26,39],11],[[82,6,92,10,11],11],[[82,6,11,92]],[[82,6,11],11],[[82,6,26,39],95],[[82,6,39,11,110,11],11],[[82,6,11,92],26],[[82,6,11,90],26],[[82,6,39,11],26],[[82,6,11]],[[82,6,39,10,26,11],26],[[82,6,11],26],[[82,6,11,26]],[[82,6,39,39],26],[[82,6,39,39],26],[[82,6,11],85],[[82,6,39,26,91],26],[[82,6,11,91],26],[[82,6,39],11],[[82,6,39,26,26,39,26],11],[[82,6,39,26,26,39],11],[[82,6,39,26,26],11],[[82,6,39,11,26,39,96],11],[[82,6,99,111],101],[[82,6,112,99,111]],[[82,6,39,103,17,17],26],[[82,6,39],11],[[82,6,39,53],11],[[82,6,39,26,26,26,26,39],11],[[82,6,39,107],11],0,[[82,6,26],11],[[82,6,26,26],26],[[82,6,39,26]],[[82,6,26],26],[[82,6,39,10,30],11],[[82,6,11,11,11],11],[[82,6,39],26],[[82,6,39],17],[[82,6,26,85,10,26],11],0,0,0,0,0,0,0,0,[[82,6,92]],[[82,6,1],92],[[82,6,1,1],92],[[82,6,92,1],92],[[82,6,113,92,92],113],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[82,6],92],[[82,6,26]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[82,6,114],30],[[]],[[]],[[],23],[[],23],[[],22],[[],22],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],29],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,[39,39],[10,10],[115,115],[106,106],[116,116],[107,107],[94,94],[117,117],[118,118],[86,86],[109,109],[93,93],[119,119],[108,108],[120,120],[121,121],[122,122],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[86,18],21],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],0,0,[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[123,123],[124,124],[125,125],[53,53],[95,95],[91,91],[110,110],[99,99],[126,126],[90,90],[84,84],[96,96],[100,100],[111,111],[98,98],[127,127],[128,128],[129,129],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[126,126],64],0,0,[[53,53],23],[[95,95],23],[[91,91],23],[[110,110],23],[[99,99],23],[[126,126],23],[[90,90],23],[[84,84],23],[[96,96],23],[[129,129],23],[[123,18],21],[[124,18],21],[[125,18],21],[[53,18],21],[[95,18],21],[[91,18],21],[[110,18],21],[[99,18],21],[[126,18],21],[[90,18],21],[[84,18],21],[[100,18],21],[[111,18],21],[[98,18],21],[[127,18],21],[[128,18],21],[[129,18],21],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[53],[95],[91],[110],[99],[126],[90],[84],[96],[129],0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],[[],23],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[126,126],[[22,[64]]]],0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[],22],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],20],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],[[],29],0,0,0,0,0,[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,118,84,39,11,10],26],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,131,92,17,26,26,26,26,17,17,26],11],[[130,6,131,92,17,26,26,26,26,17,17,26,17],11],[[130,6,118,92,17,26,26,26,26,17,17,26,17,17],26],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,118,11,11,39],26],[[130,6,17,26,26,11],26],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,118,10,131,10,92],26],[[130,6,118,26,131,26,92],26],[[130,6,118,131,26,131],26],[[130,6,92,1],26],[[130,6,118,84,39,10],26],[[130,6,26,11,26],26],[[130,6]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6,17,85,85,92]],[[130,6],26],[[130,6,17,85,85,92]],[[130,6,26,11,26,26],26],[[]],[[]],[[]],[[]],[[]],[[],23],[[],22],[[]],[[],20],[[],20],[[],29]],"p":[[15,"usize"],[3,"Dim"],[3,"IxDynImpl"],[3,"PyArrayDescr"],[3,"FromVecError"],[3,"Python"],[6,"PyObject"],[3,"NotContiguousError"],[4,"BorrowError"],[3,"PyArray_Descr"],[3,"PyObject"],[3,"PyAny"],[15,"u8"],[3,"PyArray"],[6,"PyResult"],[15,"str"],[6,"c_char"],[3,"Formatter"],[3,"Error"],[4,"Result"],[6,"Result"],[4,"Option"],[15,"bool"],[3,"Py"],[3,"Vec"],[6,"c_int"],[3,"String"],[3,"PyDowncastError"],[3,"TypeId"],[3,"PyTypeObject"],[3,"PyType"],[8,"Element"],[15,"f64"],[8,"AsPrimitive"],[6,"Ix1"],[8,"Dimension"],[6,"ArrayView"],[6,"ArrayViewMut"],[3,"PyArrayObject"],[6,"RawArrayView"],[6,"RawArrayViewMut"],[3,"ArrayBase"],[6,"Array"],[6,"Ix2"],[6,"Ix3"],[8,"NpyIndex"],[3,"PyModule"],[8,"Copy"],[6,"Ix0"],[3,"PyReadonlyArray"],[3,"PyReadwriteArray"],[8,"IntoDimension"],[4,"NPY_ORDER"],[6,"MatrixSlice"],[6,"MatrixSliceMut"],[3,"Dynamic"],[6,"DMatrixSlice"],[6,"DMatrixSliceMut"],[8,"Clone"],[8,"Unit"],[3,"Datetime"],[3,"Timedelta"],[8,"Ord"],[4,"Ordering"],[8,"PartialEq"],[15,"i64"],[8,"Hash"],[8,"PartialOrd"],[3,"Years"],[3,"Months"],[3,"Weeks"],[3,"Days"],[3,"Hours"],[3,"Minutes"],[3,"Seconds"],[3,"Milliseconds"],[3,"Microseconds"],[3,"Nanoseconds"],[3,"Picoseconds"],[3,"Femtoseconds"],[3,"Attoseconds"],[3,"PyArrayAPI"],[6,"npy_uint32"],[4,"NPY_CASTING"],[6,"npy_intp"],[3,"NpyIter"],[6,"NpyIter_GetMultiIndexFunc"],[6,"NpyIter_IterNextFunc"],[6,"npy_bool"],[4,"NPY_SELECTKIND"],[4,"NPY_SORTKIND"],[6,"c_void"],[3,"PyArrayMultiIterObject"],[3,"PyArray_Chunk"],[4,"NPY_SCALARKIND"],[4,"NPY_CLIPMODE"],[6,"npy_ucs4"],[3,"npy_stride_sort_item"],[4,"NPY_DATETIMEUNIT"],[3,"npy_datetimestruct"],[6,"npy_datetime"],[6,"c_uchar"],[4,"FILE"],[6,"PyArray_VectorUnaryFunc"],[6,"c_uint"],[3,"PyArray_ArrFuncs"],[3,"PyArray_Dims"],[3,"PyArrayMapIterObject"],[3,"PyArrayIterObject"],[4,"NPY_SEARCHSIDE"],[3,"npy_timedeltastruct"],[6,"npy_timedelta"],[6,"PyDataMem_EventHookFunc"],[4,"NpyTypes"],[3,"PyArray_ArrayDescr"],[3,"PyArrayFlagsObject"],[3,"PyArrayInterface"],[3,"PyUFuncObject"],[3,"PyArrayNeighborhoodIterObject"],[3,"NpyAuxData"],[3,"PyArray_DatetimeMetaData"],[3,"PyArray_DatetimeDTypeMetaData"],[3,"npy_cdouble"],[3,"npy_cfloat"],[3,"npy_clongdouble"],[4,"NPY_TYPES"],[4,"NPY_TYPECHAR"],[4,"NPY_TYPEKINDCHAR"],[4,"NPY_BYTEORDER_CHAR"],[3,"PyUFuncAPI"],[6,"PyUFuncGenericFunction"],[6,"Complex32"],[6,"Complex64"],[8,"IntoPyArray"],[8,"ToPyArray"]],"a":{"nalgebra":[248,249,281,282,283,284,317,318]}}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
